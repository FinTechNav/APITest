name: Deploy API Documentation to Bump.sh

on:
  push:
    branches: [main]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
  workflow_dispatch:

jobs:
  deploy-to-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Bump.sh CLI
        run: |
          npm install -g bump-cli
          pip install --user pyyaml

      - name: Custom script for x-topics import
        run: |
          # Create a Python script for proper handling of YAML arrays
          cat > direct_replace.py << 'EOF'
          import re
          import os
          import sys
          import yaml

          class SafeLineLoader(yaml.SafeLoader):
              """Custom YAML loader that preserves line breaks in scalar strings."""
              pass

          # Add constructor for preserving newlines
          def construct_scalar(self, node):
              if isinstance(node, yaml.ScalarNode) and node.style == '|':
                  return self.construct_scalar(node)
              return self.construct_scalar(node)

          SafeLineLoader.add_constructor('tag:yaml.org,2002:str', construct_scalar)

          class PreserveStringDumper(yaml.SafeDumper):
              """Custom YAML dumper that uses literal style for multiline strings."""
              def represent_scalar(self, tag, value, style=None):
                  if tag == 'tag:yaml.org,2002:str' and '\n' in value:
                      style = '|'
                  return super().represent_scalar(tag, value, style)

          def main():
              # Read the main OpenAPI file as text
              with open('openapi.yaml', 'r') as f:
                  content = f.read()
              
              # Load the topics file
              with open('topics.yaml', 'r') as f:
                  topics_raw = f.read()
              
              # Use a safer approach - manually format the topics array
              replacement = "x-topics:\n"
              
              # Process each line of the topics file
              lines = topics_raw.split('\n')
              for line in lines:
                  # If it's a top-level item, add 2 spaces. Otherwise, add 4 spaces
                  if line.startswith('-'):
                      replacement += f"  {line}\n"  # 2 spaces for top-level items
                  else:
                      # Skip empty lines or add with indentation
                      if line.strip():
                          replacement += f"    {line}\n"  # 4 spaces for content
                      else:
                          replacement += "\n"  # Preserve empty lines
              
              # Find the x-topics reference pattern
              pattern = r"x-topics:\s+\$ref:\s+['\"]?[\./\w-]+\.ya?ml['\"]?"
              
              # Replace the reference with our properly formatted content
              updated_content = re.sub(pattern, replacement.rstrip(), content)
              
              # Write the result to the output file
              with open('openapi-resolved.yaml', 'w') as f:
                  f.write(updated_content)
                  
              print("Successfully created openapi-resolved.yaml with proper YAML formatting")

          if __name__ == "__main__":
              main()
          EOF

          # Run the script
          python3 direct_replace.py

      - name: Validate YAML
        run: |
          echo "Validating the resolved YAML file..."
          python3 -c "import yaml; yaml.safe_load(open('openapi-resolved.yaml'))"

      - name: Deploy to Bump.sh
        id: deploy
        run: |
          echo "Deploying to Bump.sh..."
          bump deploy openapi-resolved.yaml --doc omni-v2
        env:
          BUMP_TOKEN: ${{ secrets.BUMP_TOKEN }}

      - name: Summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "* Original file: $(wc -c openapi.yaml | awk '{print $1}') bytes" >> $GITHUB_STEP_SUMMARY
          echo "* Resolved file: $(wc -c openapi-resolved.yaml | awk '{print $1}') bytes" >> $GITHUB_STEP_SUMMARY
          echo "* Status: ${{ steps.deploy.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "* Documentation URL: https://bump.sh/doc/omni-v2" >> $GITHUB_STEP_SUMMARY
