name: Deploy API Documentation to Bump.sh

on:
  push:
    branches: [main]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
  workflow_dispatch:

jobs:
  deploy-to-bump:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js v20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Bump.sh CLI
        run: |
          npm install -g bump-cli
          pip install --user pyyaml

      - name: Process only x-topics
        run: |
          cat > process_topics.py << 'EOF'
          import re
          import os
          import sys
          import yaml

          def main():
              # Read the main OpenAPI file as text
              with open('openapi.yaml', 'r') as f:
                  content = f.read()
              
              # Read the topics file as text first
              with open('topics.yaml', 'r') as f:
                  topics_content = f.read()
                  
              # Load the topics file to validate it's proper YAML
              try:
                  topics = yaml.safe_load(topics_content)
              except Exception as e:
                  print(f"Error loading topics.yaml: {e}")
                  sys.exit(1)
                  
              # Find the indentation level of the x-topics line
              match = re.search(r'(\s*)x-topics:', content)
              if not match:
                  print("x-topics not found in openapi.yaml")
                  with open('openapi-resolved.yaml', 'w') as f:
                      f.write(content)
                  return
                  
              indent = match.group(1)
              
              # Process the topics content with proper indentation
              processed_topics = []
              first_line = True
              
              for line in topics_content.split('\n'):
                  if not line.strip():
                      processed_topics.append('')
                  elif first_line:
                      # Skip the first line (we'll add our own x-topics:)
                      first_line = False
                  else:
                      # Add proper indentation to all lines
                      processed_topics.append(f"{indent}{line}")
              
              # Create the replacement
              replacement = f"{indent}x-topics:\n" + '\n'.join(processed_topics)
              
              # Replace the x-topics reference with our properly formatted content
              pattern = r'(\s*)x-topics:\s+\$ref:\s+[\'"]?[\./\w-]+\.ya?ml[\'"]?'
              updated_content = re.sub(pattern, replacement, content)
              
              # Write the result to the output file
              with open('openapi-resolved.yaml', 'w') as f:
                  f.write(updated_content)
                  
              print("Successfully created openapi-resolved.yaml with preserved formatting")

          if __name__ == "__main__":
              main()
          EOF

          # Run the script
          python3 process_topics.py

      - name: Validate YAML
        run: |
          echo "Validating the resolved YAML file..."
          python3 -c "import yaml; yaml.safe_load(open('openapi-resolved.yaml'))"

      - name: Deploy to Bump.sh
        id: deploy
        run: |
          echo "Deploying to Bump.sh..."
          bump deploy openapi-resolved.yaml --doc omni-v2
        env:
          BUMP_TOKEN: ${{ secrets.BUMP_TOKEN }}

      - name: Summary
        if: always()
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "* Original file: $(wc -c openapi.yaml | awk '{print $1}') bytes" >> $GITHUB_STEP_SUMMARY
          echo "* Resolved file: $(wc -c openapi-resolved.yaml | awk '{print $1}') bytes" >> $GITHUB_STEP_SUMMARY
          echo "* Status: ${{ steps.deploy.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "* Documentation URL: https://bump.sh/doc/omni-v2" >> $GITHUB_STEP_SUMMARY
