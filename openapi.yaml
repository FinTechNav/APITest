openapi: 3.1.0
info:
  title: Integrated Commerce Omni-Channel Payment API Test splitting out schemas
  description: |
    ### Introduction

    The Integrated Commerce Omni-Channel Payment API is a RESTful API that provides a unified interface for processing payments across multiple channels. This API enables developers to integrate payment processing capabilities into their applications with a single set of endpoints, simplifying implementation and reducing development time.

    The API supports integration in both the United States and Canada, using USD and CAD currencies.

    ### Features

    #### Card Present Transactions

    The API supports the following Card Present transaction types:
    - Authorization: Verification with the Issuer if the card is valid for payment.  The authorization amount is reserved, but not captured/settled.
    - Capture: Complete a previously authorized transaction.  The cardholder is billed for the transaction, and the transaction is settled to the merchant.
    - Sale: Combined authorization and capture in a single step.
    - Refund: Process reversal of a previous sale transaction (automatically performs a void if the transaction is in the current batch, or a refund if already settled)

    Card Present transactions are processed through Verifone T650c (countertop) and T650p (portable) Android-based payment terminals.

    #### Card Not Present Transactions

    For online payments, the API provides Hosted payment pages/iframes for payment transactions and secure card data collection for tokenization.  The API supports the following Card Not Present transaction types:
    - Authorization: Verification with the Issuer if the card is valid for payment.  The authorization amount is reserved, but not captured/settled.
      - Includes AVS (Address Verification Service) and CVV validation support
    - Capture: Complete a previously authorized transaction.  The cardholder is billed for the transaction, and the transaction is settled to the merchant.
    - Sale: Combined authorization and capture in a single step.
      - Includes AVS (Address Verification Service) and CVV validation support
    - Refund: Process reversal of a previous sale transaction (automatically performs a void if the transaction is in the current batch, or a refund if already settled)
    - AVS (Address Verification Service) and CVV validation

    #### Tokenization

    The API implements a tokenization system that:
    - Creates payment tokens from both Card Present and Card Not Present transactions
    - Maintains tokens that work across all channels (in-person and online)
    - Supports token management operations (create, update, delete)

    #### Webhooks

    Real-time notifications via webhooks for:
    - Transaction events ([sales](#operation-post-SaleCompleted), [authorizations](#operation-post-AuthCompleted), [captures](#operation-post-CaptureCompleted), [refunds](#operation-post-RefundCompleted))
    - Token operations ([creation](#operation-post-TokenCreated), [updates](#operation-post-TokenUpdated), [deletion](#operation-post-TokenRemoved))

    #### Payment Methods

    The API uses "Payment Methods" as the foundation for processing transactions. Each payment method has a unique paymentMethodId that represents a specific way to accept payments:

    - **Physical Terminals**: For Card Present, in-person transactions
    - **Virtual Terminals**: For Card Not Present, online transactions
    - **Tokenized Cards**: For processing Card On File transactions where customer payment information has been securely stored for recurring or future transactions

    When you call the [`GET /payment-methods`](#operation-getpaymentmethods) endpoint, the API returns a list of all payment methods available to your account. This includes physical payment terminals for in-store transactions and virtual payment terminals for online payments.

    For example, a virtual payment method might be a customized checkout iframe for your website, a dedicated payment form for your mobile app, or a hosted payment page for email invoices. Each virtual method can be tailored for different use cases â€“ some optimized for desktop browsers, others for mobile devices, or specialized for recurring subscriptions.

    Each payment method includes details such as its ID, type (physical or virtual), currency, description, and whether it's set as a default. This information helps you determine which payment method to use for different transaction scenarios.

    ### Support

    For technical assistance, please contact our support team at [support@integratedcommerce.io](mailto:support@integratedcommerce.io).

  version: 2025.04.28
  contact:
    name: Integrated Commerce Support
    url: https://docs.omni.integratedcommerce.io
    email: support@integratedcommerce.io

servers:
  - url: https://api.omni.integratedcommerce.io/v1

security:
  - ApiKeyHeader: []

x-topics:
  $ref: './topics.yaml'

tags:
  - name: Transactions
    description: Endpoints for processing payments
  - name: Tokens
    description: Endpoints for managing tokenized payment methods
  - name: Payment Methods
    description: Endpoints for managing payment methods
  - name: Transaction Notifications
    description: |
      Our webhooks provide real-time notifications for completed transaction and token events. You can configure webhooks to receive notifications for specific events, such as when a sale transaction is completed or a token is created. Each event type is separate, so you can choose to subscribe to only the events you want to receive notifications for. See the individual endpoint documentation for more details about when each event is triggered.

      Each event is sent as a `POST` request to the URL you specify in your webhook configuration, and events can all be sent to the same URL or to different URLs (per event type). The request body will contain a JSON payload with the details of the event.

      Our system will attempt to deliver event notifications to your configured destination multiple times. When a notification request fails to deliver, the system will retry failed requests with an exponential backoff strategy. If the request continues to fail after multiple attempts, the event will be marked as failed and will not be retried again.

      You can subscribe to receive notifications for the following transaction events:
      - [`sale.completed`](#operation-post-SaleCompleted)
      - [`auth.completed`](#operation-post-AuthCompleted)
      - [`capture.completed`](#operation-post-CaptureCompleted)
      - [`refund.completed`](#operation-post-RefundCompleted)

      See the [Token Notifications](#webhook-token-notifications) section for available token notifications.

      ### Webhook Configuration

      Before configuring webhooks, a shared secret value must be exchanged. This shared secret value is used to calculate the SHA-256 checksum to validate the authenticity of the webhook request. The shared secret value is a random string that is generated by us and securely shared with you. This secret value must be kept confidential and should not be shared with anyone else.

      The header request sent to your configured webhook URL will contain a `x-fsk-wh-chksm` header with the SHA-256 checksum of several concatenated request body fields, and the shared secret. The checksum is calculated using the following fields:

      - `event.id`
      - `event.type`
      - `event.timestamp`
      - `shared_secret` (not in the request body)

      Note that the correct order of the fields in the checksum calculation is important.

      #### Example

      Given the following webhook request body:
      ```json
      {
        "event": {
          "id": "evt_01JSQ33SMQKET4DMRV46W9WY84",
          "type": "sale.completed",
          "timestamp": "2025-04-07T20:03:05Z"
        },
        ...
      }
      ```

      And using `secret_value` as the shared secret, the SHA-256 checksum would be calculated as follows:

      - Concatenate the request body fields into a single string in the following order: `event.id, event.type, event.timestamp`
        - Result:
          `evt_01JSQ33SMQKET4DMRV46W9WY84sale.completed2025-04-07T20:03:05Z`

      - Append the `shared_secret` value (`secret_value`) to the concatenated string:
        - Result:
          `evt_01JSQ33SMQKET4DMRV46W9WY84sale.completed2025-04-07T20:03:05Zsecret_value`

      - Hash the string using SHA-256, using Base64 output encoding:
        - Result:
          `OU6bkK1/nScyy8fA+3QTZj1i3xaVMmAarTEnvogFFTA=`

      The value in the `x-fsk-wh-chksm` request header must match `OU6bkK1/nScyy8fA+3QTZj1i3xaVMmAarTEnvogFFTA=`.

  - name: Token Notifications
    description: |
      In addition to [transaction notifications](#webhook-transaction-notifications), you can also subscribe to receive notifications for the following token events:

      - [`token.created`](#operation-post-TokenCreated)
      - [`token.updated`](#operation-post-TokenUpdated)
      - [`token.removed`](#operation-post-TokenRemoved)

      The same rules as [transaction notifications](#topic-webhook-configuration) apply:

      - The request body will contain a JSON payload with the details of the event
      - The header request sent to your configured webhook URL will contain a `x-fsk-wh-chksm` header with the SHA-256 checksum calculated from the request body and shared secret

components:
  securitySchemes:
    ApiKeyHeader:
      type: apiKey
      in: header
      name: x-api-key
      description: |
        All API requests must be authenticated using an API key. The API key should be included in the `x-api-key` header of each request.

        ### API Key Format

        ```
        x-api-key: <api-key>
        ```

        ### Environment-Specific Keys

        We provide two distinct API keys for different environments. The base URL for both environments is the same (`https://api.omni.integratedcommerce.io/v1`), but the keys are different.

        #### Sandbox Environment
        - Format: `key_test_xxxxxxxxxxxxxxxx`
        - Use this key for development and testing

        #### Production Environment
        - Format: `key_live_xxxxxxxxxxxxxxxx`
        - Use this key for live production traffic

        ### Error Responses

        If authentication fails, you will receive a `401 Unauthorized` response:

        ```json
        {
          "error": {
            "code": "1000",
            "message": "Invalid or missing API key"
          }
        }
        ```

        ## Rate Limiting

        API requests are subject to rate limiting based on your subscription plan. Rate limit headers are included in all responses:

        - `X-RateLimit-Limit`: Maximum number of requests allowed per time window
        - `X-RateLimit-Remaining`: Number of requests remaining in the current time window
        - `X-RateLimit-Reset`: Unix timestamp when the rate limit will reset

        When you exceed the rate limit, you will receive a `429 Too Many Requests` response.

  schemas:
    $ref: './components/schemas.yaml'

  parameters:
    WebhookSignatureHeader:
      name: x-fsk-wh-chksm
      in: header
      description: The SHA-256 hash signature of the webhook payload, encoded in base64.
      example: 'OU6bkK1/nScyy8fA+3QTZj1i3xaVMmAarTEnvogFFTA='
      required: true
      schema:
        type: string

  requestBodies:
    SaleCompletedWebhook:
      description: The request body for the `sale.completed` webhook event.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SaleCompletedWebhook'
          example:
            event:
              id: 'evt_01JS21X856RR8R69GV5F17XK9C'
              type: 'sale.completed'
              timestamp: '2025-04-16T14:30:00Z'
            originalResponse:
              $ref: '#/components/examples/SaleCardPresentResponse/value'

    AuthCompletedWebhook:
      description: The request body for the `auth.completed` webhook event.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthCompletedWebhook'
          example:
            event:
              id: 'evt_01JS21X856RR8R69GV5F17XK9C'
              type: 'auth.completed'
              timestamp: '2025-04-16T14:30:00Z'
            originalResponse:
              $ref: '#/components/examples/AuthCardPresentResponse/value'

    CaptureCompletedWebhook:
      description: The request body for the `capture.completed` webhook event.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CaptureCompletedWebhook'
          example:
            event:
              id: 'evt_01JS21X856RR8R69GV5F17XK9C'
              type: 'capture.completed'
              timestamp: '2025-04-16T14:30:00Z'
            originalResponse:
              $ref: '#/components/examples/CaptureResponse/value'

    RefundCompletedWebhook:
      description: The request body for the `refund.completed` webhook event.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RefundCompletedWebhook'
          example:
            event:
              id: 'evt_01JS21X856RR8R69GV5F17XK9C'
              type: 'refund.completed'
              timestamp: '2025-04-16T14:30:00Z'
            originalResponse:
              $ref: '#/components/examples/RefundResponse/value'

    TokenCreatedWebhook:
      description: The request body for the `token.created` webhook event.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenCreatedWebhook'
          example:
            event:
              id: 'evt_01JS21X856RR8R69GV5F17XK9C'
              type: 'token.created'
              timestamp: '2025-04-16T14:30:00Z'
            originalResponse:
              $ref: '#/components/examples/CreateTokenCardPresentResponse/value'

    TokenUpdatedWebhook:
      description: The request body for the `token.updated` webhook event.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenUpdatedWebhook'
          example:
            event:
              id: 'evt_01JS21X856RR8R69GV5F17XK9C'
              type: 'token.updated'
              timestamp: '2025-04-16T14:30:00Z'
            originalResponse:
              $ref: '#/components/examples/UpdateTokenResponse/value'

    TokenRemovedWebhook:
      description: The request body for the `token.removed` webhook event.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TokenRemovedWebhook'
          example:
            event:
              id: 'evt_01JS21X856RR8R69GV5F17XK9C'
              type: 'token.removed'
              timestamp: '2025-04-16T14:30:00Z'
            originalResponse:
              $ref: '#/components/examples/RemoveTokenResponse/value'

  responses:
    UnauthorizedError:
      description: Unauthorized response due to an invalid or missing API key.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  code:
                    type: number
                    example: 1000
                  message:
                    type: string
                    example: Invalid or missing API key
          examples:
            UnauthorizedError:
              value:
                error:
                  code: 1000
                  message: Invalid or missing API key

    SuccessfulWebhookAcknowledgement:
      description: Successful acknowledgement of a webhook event. The response should be a 200 OK status with an empty body.
      content:
        application/json:
          schema:
            type: object
            properties: {}
          examples:
            SuccessfulWebhookResponse:
              value: {}

  examples:
    SaleCardPresentResponse:
      description: A successful response for a Card Present sale transaction.
      value:
        id: 'trx_01J2F0EKHC7HY2R93C8ENBD1FG'
        paymentMethod:
          id: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
          type: 'physical'
          currency: 'USD'
          description: 'Main Store Terminal'
        invoiceNumber: 'inv_12345678'
        orderNumber: 'order_number_1234'
        referenceId: 'ref_s192i49i'
        resultCode: 0
        resultText: 'Successful transaction request'
        requestedAmount: 1000
        approvedAmount: 1000
        balanceAmount: 0
        transactionResponses:
          - responseCode: 1
            authCode: '000AAA'
            amountApproved: 1000
            approvedAmountBreakdown:
              amountGoodsAndServices: 1000
              tax: 0
              cashBack: 0
              tip: 0
            paymentMethod:
              id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
              type: 'token'
              currency: 'USD'
              description: "Token for John Doe's Visa"
              maskedCardNumber: '************0011'
              cardExpDate: '1225'
            cardType: 'VISA'
            accountType: 'Credit'
            hostResponseText: 'APPROVED 00'
            receipt:
              lines:
                [
                  '     Test Merchant      ',
                  '      300 S Wacker      ',
                  '         Loop,          ',
                  '                        ',
                  '                        ',
                  'TERM #          11000367',
                  'RECORD #         0656191',
                  'HOST INVOICE #    000038',
                  'HOST SEQ #    1720656191',
                  'MERCH INVOICE.  fgj24344',
                  '------------------------',
                  'CARD    ************0011',
                  'VISA             Contact',
                  '07/10/2024      20:03:05',
                  '------------------------',
                  'Purchase      USD $10.00',
                  'Tip           USD  $0.00',
                  'Cashback      USD  $0.00',
                  '                        ',
                  'TOTAL         USD $10.00',
                  '------------------------',
                  'AUTH#:000AAA       B:171',
                  '          Sale          ',
                  '      APPROVED 00       ',
                  '       THANK YOU        ',
                  '                        ',
                  '      Visa Credit       ',
                  'AID:      A0000000031010',
                  'TC:     43F4ACF64B07551A',
                  'TVR:          8000008000',
                  'TSI:                7800',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '     MERCHANT COPY      ',
                  '     Test Merchant      ',
                  '      300 S Wacker      ',
                  '         Loop,          ',
                  '                        ',
                  '                        ',
                  'TERM #          11000367',
                  'RECORD #         0656191',
                  'HOST INVOICE #    000038',
                  'HOST SEQ #    1720656191',
                  'MERCH INVOICE.  fgj24344',
                  '------------------------',
                  'CARD    ************0011',
                  'VISA             Contact',
                  '07/10/2024      20:03:05',
                  '------------------------',
                  'Purchase      USD $10.00',
                  'Tip           USD  $0.00',
                  'Cashback      USD  $0.00',
                  '                        ',
                  'TOTAL         USD $10.00',
                  '------------------------',
                  'AUTH#:000AAA       B:171',
                  '          Sale          ',
                  '      APPROVED 00       ',
                  '       THANK YOU        ',
                  '                        ',
                  '      Visa Credit       ',
                  'AID:      A0000000031010',
                  'TC:     43F4ACF64B07551A',
                  'TVR:          8000008000',
                  'TSI:                7800',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '     CUSTOMER COPY      ',
                ]

    AuthCardPresentResponse:
      description: A successful response for a Card Present authorization transaction.
      value:
        id: 'trx_01J2F0EKHC7HY2R93C8ENBD1FG'
        paymentMethod:
          id: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
          type: 'physical'
          currency: 'USD'
          description: 'Main Store Terminal'
        invoiceNumber: 'inv_12345678'
        orderNumber: 'order_number_1234'
        referenceId: 'ref_s192i49i'
        resultCode: 0
        resultText: 'Successful transaction request'
        requestedAmount: 1000
        approvedAmount: 1000
        balanceAmount: 0
        transactionResponses:
          - responseCode: 1
            authCode: '000AAA'
            amountApproved: 1000
            approvedAmountBreakdown:
              amountGoodsAndServices: 1000
              tax: 0
              cashBack: 0
              tip: 0
            paymentMethod:
              id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
              type: 'token'
              currency: 'USD'
              description: "Token for John Doe's Visa"
              maskedCardNumber: '************0011'
              cardExpDate: '1225'
            cardType: 'VISA'
            accountType: 'Credit'
            hostResponseText: 'APPROVED 00'
            receipt:
              lines:
                [
                  '     Test Merchant      ',
                  '      300 S Wacker      ',
                  '         Loop,          ',
                  '                        ',
                  '                        ',
                  'TERM #          11000367',
                  'RECORD #         0656191',
                  'HOST INVOICE #    000038',
                  'HOST SEQ #    1720656191',
                  'MERCH INVOICE.  fgj24344',
                  '------------------------',
                  'CARD    ************0011',
                  'VISA             Contact',
                  '07/10/2024      20:03:05',
                  '------------------------',
                  '        PRE AUTH        ',
                  'TOTAL         USD $10.00',
                  '------------------------',
                  'AUTH#:000AAA            ',
                  '                        ',
                  '      APPROVED 00       ',
                  '       THANK YOU        ',
                  '                        ',
                  '      Visa Credit       ',
                  'AID:      A0000000031010',
                  'TC:     43F4ACF64B07551A',
                  'TVR:          8000008000',
                  'TSI:                7800',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '     MERCHANT COPY      ',
                  '     Test Merchant      ',
                  '      300 S Wacker      ',
                  '         Loop,          ',
                  '                        ',
                  '                        ',
                  'TERM #          11000367',
                  'RECORD #         0656191',
                  'HOST INVOICE #    000038',
                  'HOST SEQ #    1720656191',
                  'MERCH INVOICE.  fgj24344',
                  '------------------------',
                  'CARD    ************0011',
                  'VISA             Contact',
                  '07/10/2024      20:03:05',
                  '------------------------',
                  '        PRE AUTH        ',
                  'TOTAL         USD $10.00',
                  '------------------------',
                  'AUTH#:000AAA            ',
                  '                        ',
                  '      APPROVED 00       ',
                  '       THANK YOU        ',
                  '                        ',
                  '      Visa Credit       ',
                  'AID:      A0000000031010',
                  'TC:     43F4ACF64B07551A',
                  'TVR:          8000008000',
                  'TSI:                7800',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '                        ',
                  '     CUSTOMER COPY      ',
                ]

    CaptureResponse:
      description: A successful response for a capture transaction.
      value:
        id: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
        referenceId: 'ref_s192i49i'
        paymentMethod:
          id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
          type: 'token'
          currency: 'USD'
          description: "Token for John Doe's Visa"
          maskedCardNumber: '************0011'
          cardExpDate: '1225'
        invoiceNumber: 'inv_12345678'
        orderNumber: 'order_number_1234'
        resultCode: 0
        resultText: 'Successful transaction request'
        requestedAmount: 1000
        approvedAmount: 1000
        receipt:
          lines:
            [
              '     Test Merchant      ',
              '      300 S Wacker      ',
              '         Loop,          ',
              '                        ',
              '                        ',
              'TERM #          11000367',
              'RECORD #         0656191',
              'HOST INVOICE #    000038',
              'HOST SEQ #    1720656191',
              'MERCH INVOICE.  fgj24344',
              '------------------------',
              'CARD    ************0011',
              'VISA             Contact',
              '07/10/2024      20:03:05',
              '------------------------',
              '                        ',
              '   PRE AUTH COMPLETE    ',
              '                        ',
              'TOTAL         USD $10.00',
              '------------------------',
              'AUTH#:000AAA       B:171',
              '                        ',
              '      APPROVED 00       ',
              '       THANK YOU        ',
              '                        ',
              '      Visa Credit       ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '     MERCHANT COPY      ',
              '     Test Merchant      ',
              '      300 S Wacker      ',
              '         Loop,          ',
              '                        ',
              '                        ',
              'TERM #          11000367',
              'RECORD #         0656191',
              'HOST INVOICE #    000038',
              'HOST SEQ #    1720656191',
              'MERCH INVOICE.  fgj24344',
              '------------------------',
              'CARD    ************0011',
              'VISA             Contact',
              '07/10/2024      20:03:05',
              '------------------------',
              '                        ',
              '   PRE AUTH COMPLETE    ',
              '                        ',
              'TOTAL         USD $10.00',
              '------------------------',
              'AUTH#:000AAA       B:171',
              '                        ',
              '      APPROVED 00       ',
              '       THANK YOU        ',
              '                        ',
              '      Visa Credit       ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '     CUSTOMER COPY      ',
            ]

    RefundResponse:
      description: A successful response for a refund transaction.
      value:
        id: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
        referenceId: 'ref_s192i49i'
        paymentMethod:
          id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
          type: 'token'
          currency: 'USD'
          description: "Token for John Doe's Visa"
          maskedCardNumber: '************0011'
          cardExpDate: '1225'
        invoiceNumber: 'ref_inv_12345678'
        orderNumber: 'ref_order_1234'
        resultCode: 0
        resultText: 'Successful transaction request'
        requestedAmount: 1000
        approvedAmount: 1000
        receipt:
          lines:
            [
              '     Test Merchant      ',
              '      300 S Wacker      ',
              '         Loop,          ',
              '                        ',
              '                        ',
              'TERM #          11000367',
              'RECORD #         0656191',
              'HOST INVOICE #    000038',
              'HOST SEQ #    1720656191',
              'MERCH INVOICE.  fgj24344',
              '------------------------',
              'CARD    ************0011',
              'VISA             Contact',
              '07/10/2024      20:03:05',
              '------------------------',
              '       VOID SALE        ',
              '                        ',
              'TOTAL         USD $10.00',
              '------------------------',
              'AUTH#:000AAA       B:171',
              '                        ',
              '      APPROVED 00       ',
              '       THANK YOU        ',
              '                        ',
              '      Visa Credit       ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '     MERCHANT COPY      ',
              '     Test Merchant      ',
              '      300 S Wacker      ',
              '         Loop,          ',
              '                        ',
              '                        ',
              'TERM #          11000367',
              'RECORD #         0656191',
              'HOST INVOICE #    000038',
              'HOST SEQ #    1720656191',
              'MERCH INVOICE.  fgj24344',
              '------------------------',
              'CARD    ************0011',
              'VISA             Contact',
              '07/10/2024      20:03:05',
              '------------------------',
              '       VOID SALE        ',
              '                        ',
              'TOTAL         USD $10.00',
              '------------------------',
              'AUTH#:000AAA       B:171',
              '                        ',
              '      APPROVED 00       ',
              '       THANK YOU        ',
              '                        ',
              '      Visa Credit       ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '     CUSTOMER COPY      ',
            ]

    UnreferencedRefundCardPresentResponse:
      description: A successful response for a Card Present unreferenced refund transaction.
      value:
        id: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
        referenceId: 'ref_s192i49i'
        paymentMethod:
          id: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
          type: 'physical'
          currency: 'USD'
          description: 'Main Store Terminal'
        invoiceNumber: 'inv_12345678'
        orderNumber: 'order_number_1234'
        resultCode: 0
        resultText: 'Successful transaction request'
        requestedAmount: 1000
        approvedAmount: 1000
        receipt:
          lines:
            [
              '     Test Merchant      ',
              '      300 S Wacker      ',
              '         Loop,          ',
              '                        ',
              '                        ',
              'TERM #          11000367',
              'RECORD #         0656191',
              'HOST INVOICE #    000038',
              'HOST SEQ #    1720656191',
              'MERCH INVOICE.  fgj24344',
              '------------------------',
              'CARD    ************0011',
              'VISA             Contact',
              '07/10/2024      20:03:05',
              '------------------------',
              '         REFUND         ',
              '                        ',
              'TOTAL         USD $10.00',
              '------------------------',
              'AUTH#:000AAA       B:171',
              '                        ',
              '      APPROVED 00       ',
              '       THANK YOU        ',
              '                        ',
              '      Visa Credit       ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '     MERCHANT COPY      ',
              '     Test Merchant      ',
              '      300 S Wacker      ',
              '         Loop,          ',
              '                        ',
              '                        ',
              'TERM #          11000367',
              'RECORD #         0656191',
              'HOST INVOICE #    000038',
              'HOST SEQ #    1720656191',
              'MERCH INVOICE.  fgj24344',
              '------------------------',
              'CARD    ************0011',
              'VISA             Contact',
              '07/10/2024      20:03:05',
              '------------------------',
              '         REFUND         ',
              '                        ',
              'TOTAL         USD $10.00',
              '------------------------',
              'AUTH#:000AAA       B:171',
              '                        ',
              '      APPROVED 00       ',
              '       THANK YOU        ',
              '                        ',
              '      Visa Credit       ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '                        ',
              '     CUSTOMER COPY      ',
            ]

    CreateTokenCardPresentResponse:
      description: A successful response for a card tokenization transaction.
      value:
        id: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
        paymentMethod:
          id: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
          type: 'physical'
          currency: 'USD'
          description: 'Main Store Terminal'
        referenceId: 'ref_add_card_12345'
        resultCode: 0
        resultText: 'Card successfully tokenized'
        transactionResponses:
          - responseCode: 1
            authCode: '000AAA'
            paymentMethod:
              id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
              type: 'token'
              currency: 'USD'
              description: "Token for John Doe's Visa"
              maskedCardNumber: '************0011'
              cardExpDate: '1225'
            cardType: 'VISA'
            accountType: 'Credit'
            hostResponseText: 'APPROVED 00'
            customerVerificationMethod: 'SIGNATURE'

    UpdateTokenResponse:
      description: A successful response for a tokenized card update transaction.
      value:
        id: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
        paymentMethod:
          id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
          type: 'token'
          currency: 'USD'
          description: "Token for John Doe's Visa"
          maskedCardNumber: '************0011'
          cardExpDate: '1225'
        referenceId: 'ref_update_card_12345'
        resultCode: 0
        resultText: 'Card successfully updated'

    RemoveTokenResponse:
      description: A successful response for a tokenized card removal transaction.
      value:
        id: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
        paymentMethod:
          id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
          type: 'token'
          currency: 'USD'
          description: "Token for John Doe's Visa"
          maskedCardNumber: '************0011'
          cardExpDate: '1225'
        referenceId: 'ref_remove_card_12345'
        resultCode: 0
        resultText: 'Card successfully removed'

paths:
  /payment-methods:
    get:
      operationId: getPaymentMethods
      summary: List Payment Methods
      description: |
        Returns a list of valid payment methods that have been configured in the system for the authenticated merchant.

        IDs of both "physical" payment terminals that can be used to process Card Present transactions and IDs of "virtual" terminals (hosted payment pages or iframes) that can be used to process Card Not Present transactions will be returned.
      tags:
        - Payment Methods
      responses:
        '200':
          description: A successful response containing available payment methods
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    paymentMethod:
                      type: object
                      properties:
                        id:
                          type: string
                          description: |
                            The payment method ID. Physical terminals will be prefixed with `pmt_trm_` and virtual terminals will be prefixed with `pmt_vrt_`.

                            Example physical format: `pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF`
                            Example virtual format: `pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS`
                        type:
                          type: string
                          enum: [physical, virtual]
                        currency:
                          type: string
                          enum: [USD, CAD]
                        description:
                          type: string
                          maxLength: 1000
                          description: A human-readable name for the payment method
              examples:
                successfulResponse:
                  description: A successful response for retrieving the available payment methods.
                  value:
                    - paymentMethodId:
                        id: pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF
                        type: physical
                        currency: USD
                        description: Main Store Terminal
                    - paymentMethodId:
                        id: pmt_trm_01JRZQW7FXMG62D8HJTPK3Y5VB
                        type: physical
                        currency: USD
                        description: Secondary Store Terminal
                    - paymentMethodId:
                        id: pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS
                        type: virtual
                        currency: USD
                        description: Online Checkout Iframe
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /payment-methods/physical:
    post:
      operationId: createCardPresentToken
      summary: Create Token (Card Present)
      description: |
        Tokenize a card using a physical terminal. A verification transaction or $0 authorization will occur to validate the card. If valid, the card and expiration date will be tokenized and stored and a paymentMethodId will be returned for future Card On File transactions.

        #### Webhook Events

        The following webhook events will be triggered during the tokenization process:
        - `token.created` - when a card is tokenized and stored as a payment method.
      tags:
        - Tokens
      requestBody:
        description: The request to tokenize a card using a physical terminal.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardOnFileAddRequest'
            examples:
              cofAddRequest:
                summary: Card On File Add request example
                value:
                  paymentMethodId: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
                  referenceId: 'ref_add_card_12345'
      responses:
        '200':
          description: A successful card tokenization response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardOnFileAddResponse'
              examples:
                successfulResponse:
                  $ref: '#/components/examples/CreateTokenCardPresentResponse'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    properties:
                      errorDetails:
                        allOf:
                          - $ref: '#/components/schemas/ValidationError'
                          - type: object
                            properties:
                              field:
                                example: 'paymentMethodId'
                              details:
                                example: "'PaymentMethodId' must not be empty."
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /payment-methods/virtual:
    post:
      operationId: createCardNotPresentToken
      summary: Create Token (Card Not Present)
      description: |
        Tokenize a card using a hosted payment page/iframe. A verification transaction or $0 authorization will occur to validate the card. If valid, a tokenized card ID will be stored and a paymentMethodId will be returned for future Card On File transactions.

        #### Webhook Events

        The following webhook events will be triggered during the tokenization process:
        - `token.created` - when a card is tokenized and stored as a payment method.
      tags:
        - Tokens
      requestBody:
        description: The request to tokenize a card using a hosted payment page or iframe.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardOnFileVirtualAddRequest'
            examples:
              cofVirtualAddRequest:
                summary: Card Not Present Token Creation request example
                value:
                  paymentMethodId: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
                  referenceId: 'ref_add_card_12345'
                  returnUrl: 'https://merchant.example.com/payment-complete'
      responses:
        '200':
          description: A successful Card Not Present tokenization response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardOnFileVirtualAddResponse'
              examples:
                successfulResponse:
                  summary: A successful response for a Card Not Present tokenization transaction.
                  value:
                    id: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
                    paymentMethod:
                      id: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
                      type: 'virtual'
                      currency: 'USD'
                      description: 'Online Checkout Iframe'
                    referenceId: 'ref_add_card_12345'
                    requestedAmount: 0
                    sessionId: 'ses_01JSFAMY0AGW27QKP30C727512'
                    iframeUrl: 'https://iframe.integratedcommerce.io/session/01JSFAMY0AGW27QKP30C727512'
                    expirationTimestamp: '2025-04-17T14:19:03Z'
                    status: 'pending'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    properties:
                      errorDetails:
                        allOf:
                          - $ref: '#/components/schemas/ValidationError'
                          - type: object
                            properties:
                              field:
                                example: 'paymentMethodId'
                              details:
                                example: "'PaymentMethodId' must not be empty."
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /payment-methods/token/{id}:
    put:
      operationId: updateToken
      summary: Update Token
      description: |
        Update the expiration date for a previously tokenized card.

        #### Webhook Events

        The following webhook events will be triggered during the tokenized card update process:
        - `token.updated` - when an expiration date for a previously tokenized card is updated.
      tags:
        - Tokens
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tokenized card to update.
          schema:
            type: string
          example: pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J
      requestBody:
        description: The request to update a previously tokenized card.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardOnFileUpdateRequest'
            examples:
              cofUpdateRequest:
                summary: Card On File Update request example
                value:
                  referenceId: 'ref_update_card_12345'
                  cardExpDate: '1225'
      responses:
        '200':
          description: A successful card update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardOnFileUpdateResponse'
              examples:
                successfulResponse:
                  $ref: '#/components/examples/UpdateTokenResponse'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    properties:
                      errorDetails:
                        allOf:
                          - $ref: '#/components/schemas/ValidationError'
                          - type: object
                            properties:
                              field:
                                example: 'cardExpDate'
                              details:
                                example: "The length of 'CardExpDate' must be 4 characters or fewer."
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      operationId: removeToken
      summary: Remove Token
      description: |
        Remove a previously tokenized card from the system.

        #### Webhook Events

        The following webhook events will be triggered during the tokenized card removal process:
        - `token.removed` - when a previously tokenized card is removed from the system.
      tags:
        - Tokens
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the tokenized card to remove.
          schema:
            type: string
          example: pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J
        - name: referenceId
          in: query
          required: false
          description: A reference ID to tag and track this transaction for reconciliation.
          schema:
            type: string
          example: ref_remove_card_12345
      responses:
        '200':
          description: A successful card removal response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardOnFileRemoveResponse'
              examples:
                successfulResponse:
                  $ref: '#/components/examples/RemoveTokenResponse'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Error'
                  - type: object
                    properties:
                      errorDetails:
                        allOf:
                          - $ref: '#/components/schemas/ValidationError'
                          - type: object
                            properties:
                              field:
                                example: 'id'
                              details:
                                example: "'Id' must not be empty."
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/physical-sale:
    post:
      operationId: saleCardPresent
      summary: Sale (Card Present)
      description: |
        Process a financial transaction using a physical payment terminal where the card is present. The card will be tokenized for future use.

        #### Webhook Events

        The following webhook events will be triggered during the transaction process:
        - `sale.completed` - when a financial transaction is processed and completed.
        - `token.created` - when a card is tokenized and stored as a payment method.
      tags:
        - Transactions
      requestBody:
        description: The request to process a Card Present transaction using a physical payment terminal.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardPresentRequest'
            examples:
              cpSaleRequest:
                summary: Card Present Sale request example
                value:
                  amount: 1000
                  amountBreakdown:
                    amountGoodsAndServices: 1000
                    tax: 0
                    cashBack: 0
                    tip: 0
                  paymentMethodId: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
                  invoiceNumber: 'inv_12345678'
                  orderNumber: 'order_number_1234'
                  referenceId: 'ref_s192i49i'
      responses:
        '200':
          description: A successful Card Present sale response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TransactionResponseObject'
                  - type: object
                    properties:
                      paymentMethod:
                        allOf:
                          - $ref: '#/components/schemas/PaymentMethodDetails'
                          - type: object
                            description: |
                              The payment method used for this Card Present transaction.

                              If a new card was tokenized during the transaction, the tokenized card ID and details will be returned in the `transactionResponses`'s `paymentMethod` object.
                            properties:
                              id:
                                example: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
              examples:
                successfulResponse:
                  $ref: '#/components/examples/SaleCardPresentResponse'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/virtual-sale:
    post:
      operationId: saleCardNotPresent
      summary: Sale (Card Not Present)
      description: |
        Process a financial transaction using a hosted payment page or iframe where the card is not physically present. The card will be tokenized for future use.

        #### Webhook Events

        The following webhook events will be triggered during the transaction process:
        - `sale.completed` - when a financial transaction is processed and completed.
        - `token.created` - when a card is tokenized and stored as a payment method.
      tags:
        - Transactions
      requestBody:
        description: The request to process a Card Not Present transaction using a hosted payment page or iframe.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardNotPresentRequest'
            examples:
              cnpSaleRequest:
                summary: Card Not Present Sale request example
                value:
                  amount: 1000
                  amountBreakdown:
                    amountGoodsAndServices: 1000
                    tax: 0
                    cashBack: 0
                    tip: 0
                  paymentMethodId: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
                  invoiceNumber: 'inv_12345678'
                  orderNumber: 'order_number_1234'
                  referenceId: 'ref_s192i49i'
                  returnUrl: 'https://merchant.example.com/payment-complete'
      responses:
        '200':
          description: A successful Card Not Present sale response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CNPVirtualResponse'
              examples:
                successfulResponse:
                  summary: A successful response for a Card Not Present sale transaction.
                  value:
                    id: 'trx_01J2F0EKHC7HY2R93C8ENBD1FG'
                    paymentMethod:
                      id: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
                      type: 'virtual'
                      currency: 'USD'
                      description: 'Online Checkout Iframe'
                    invoiceNumber: 'inv_12345678'
                    orderNumber: 'order_number_1234'
                    referenceId: 'ref_s192i49i'
                    requestedAmount: 1000
                    sessionId: 'ses_01JSFAMY0AGW27QKP30C727512'
                    iframeUrl: 'https://iframe.integratedcommerce.io/session/01JSFAMY0AGW27QKP30C727512'
                    expirationTimestamp: '2025-04-17T14:19:03Z'
                    status: 'pending'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/token-sale:
    post:
      operationId: saleToken
      summary: Sale (Token)
      description: |
        Process a financial transaction using a previously tokenized card.

        #### Webhook Events

        The following webhook events will be triggered during the transaction process:
        - `sale.completed` - when a financial transaction is processed and completed.
      tags:
        - Transactions
      requestBody:
        description: The request to process a Card On File transaction using a tokenized card.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardOnFileRequest'
            examples:
              cofSaleRequest:
                summary: Card On File Sale request example
                value:
                  amount: 1000
                  amountBreakdown:
                    amountGoodsAndServices: 1000
                    tax: 0
                    cashBack: 0
                    tip: 0
                  paymentMethodId: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
                  invoiceNumber: 'inv_12345678'
                  orderNumber: 'order_number_1234'
                  referenceId: 'ref_s192i49i'
      responses:
        '200':
          description: A successful Card On File sale response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CNPTransactionResponse'
              examples:
                successfulResponse:
                  summary: A successful response for a Card On File sale transaction.
                  value:
                    id: 'trx_01J2F0EKHC7HY2R93C8ENBD1FG'
                    paymentMethod:
                      id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
                      type: 'token'
                      currency: 'USD'
                      description: "Token for John Doe's Visa"
                      maskedCardNumber: '************0011'
                      cardExpDate: '1225'
                    invoiceNumber: 'inv_12345678'
                    orderNumber: 'order_number_1234'
                    referenceId: 'ref_s192i49i'
                    resultCode: 0
                    resultText: 'Successful transaction request'
                    requestedAmount: 1000
                    approvedAmount: 1000
                    balanceAmount: 0
                    transactionResponses:
                      [
                        {
                          responseCode: 1,
                          authCode: '000AAA',
                          amountApproved: 1000,
                          approvedAmountBreakdown:
                            { amountGoodsAndServices: 1000, tax: 0, cashBack: 0, tip: 0 },
                          paymentMethod:
                            {
                              id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J',
                              type: 'token',
                              currency: 'USD',
                              description: "Token for John Doe's Visa",
                              maskedCardNumber: '************0011',
                              cardExpDate: '1225',
                            },
                          cardType: 'VISA',
                          avsResult: 'A',
                          cvvResult: 'M',
                          accountType: 'Credit',
                          hostResponseText: 'APPROVED 00',
                        },
                      ]
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/physical-auth:
    post:
      operationId: authCardPresent
      summary: Auth (Card Present)
      description: |
        Create an authorization using a physical payment terminal where the card is present. This will not result in a financial transaction and the card will be tokenized. A capture must be performed to complete the financial transaction.

        #### Webhook Events

        The following webhook events will be triggered during the authorization process:
        - `auth.completed` - when an authorization is processed and completed.
        - `token.created` - when a card is tokenized and stored as a payment method.
      tags:
        - Transactions
      requestBody:
        description: The request to create a Card Present authorization using a physical payment terminal.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardPresentRequest'
            examples:
              cpAuthRequest:
                summary: Card Present Authorization request example
                value:
                  amount: 1000
                  amountBreakdown:
                    amountGoodsAndServices: 1000
                    tax: 0
                    cashBack: 0
                    tip: 0
                  paymentMethodId: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
                  invoiceNumber: 'inv_12345678'
                  orderNumber: 'order_number_1234'
                  referenceId: 'ref_s192i49i'
      responses:
        '200':
          description: A successful Card Present authorization response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TransactionResponseObject'
                  - type: object
                    properties:
                      paymentMethod:
                        allOf:
                          - $ref: '#/components/schemas/PaymentMethodDetails'
                          - type: object
                            # TODO:rafal@fiska.com: this is the same override as transactions/physical-sale
                            description: |
                              The payment method used for this Card Present transaction.

                              If a new card was tokenized during the transaction, the tokenized card ID and details will be returned in the `transactionResponses`'s `paymentMethod` object.
                            properties:
                              id:
                                example: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
              examples:
                successfulResponse:
                  $ref: '#/components/examples/AuthCardPresentResponse'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/virtual-auth:
    post:
      operationId: authCardNotPresent
      summary: Auth (Card Not Present)
      description: |
        Create an authorization using a hosted payment page or iframe where the card is not physically present. This will not result in a financial transaction and the card will be tokenized. A capture must be performed to complete the financial transaction.

        #### Webhook Events

        The following webhook events will be triggered during the authorization process:
        - `auth.completed` - when an authorization is processed and completed.
        - `token.created` - when a card is tokenized and stored as a payment method.
      tags:
        - Transactions
      requestBody:
        description: The request to create a Card Not Present authorization using a hosted payment page or iframe.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardNotPresentRequest'
            examples:
              cnpAuthRequest:
                summary: Card Not Present Authorization request example
                value:
                  amount: 1000
                  amountBreakdown:
                    amountGoodsAndServices: 1000
                    tax: 0
                    cashBack: 0
                    tip: 0
                  paymentMethodId: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
                  invoiceNumber: 'inv_12345678'
                  orderNumber: 'order_number_1234'
                  referenceId: 'ref_s192i49i'
                  returnUrl: 'https://merchant.example.com/payment-complete'
      responses:
        '200':
          description: A successful Card Not Present authorization response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CNPVirtualResponse'
              examples:
                successfulResponse:
                  summary: A successful response for a Card Not Present authorization transaction.
                  value:
                    id: 'trx_01J2F0EKHC7HY2R93C8ENBD1FG'
                    paymentMethod:
                      id: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
                      type: 'virtual'
                      currency: 'USD'
                      description: 'Online Checkout Iframe'
                    invoiceNumber: 'inv_12345678'
                    orderNumber: 'order_number_1234'
                    referenceId: 'ref_s192i49i'
                    requestedAmount: 1000
                    sessionId: 'ses_01JSFAMY0AGW27QKP30C727512'
                    iframeUrl: 'https://iframe.integratedcommerce.io/session/01JSFAMY0AGW27QKP30C727512'
                    expirationTimestamp: '2025-04-17T14:19:03Z'
                    status: 'pending'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/token-auth:
    post:
      operationId: authToken
      summary: Auth (Token)
      description: |
        Create an authorization using a previously tokenized card. This will not result in a financial transaction. A capture must be performed to complete the financial transaction.

        #### Webhook Events

        The following webhook events will be triggered during the authorization process:
        - `auth.completed` - when an authorization is processed and completed.
      tags:
        - Transactions
      requestBody:
        description: The request to create a Card On File authorization using a tokenized card.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardOnFileRequest'
            examples:
              cofAuthRequest:
                summary: Card On File Authorization request example
                value:
                  amount: 1000
                  amountBreakdown:
                    amountGoodsAndServices: 1000
                    tax: 0
                    cashBack: 0
                    tip: 0
                  paymentMethodId: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
                  invoiceNumber: 'inv_12345678'
                  orderNumber: 'order_number_1234'
                  referenceId: 'ref_s192i49i'
      responses:
        '200':
          description: A successful Card On File authorization response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CNPTransactionResponse'
              examples:
                successfulResponse:
                  summary: A successful response for a Card On File authorization transaction.
                  value:
                    id: 'trx_01J2F0EKHC7HY2R93C8ENBD1FG'
                    paymentMethod:
                      id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
                      type: 'token'
                      currency: 'USD'
                      description: "Token for John Doe's Visa"
                      maskedCardNumber: '************0011'
                      cardExpDate: '1225'
                    invoiceNumber: 'inv_12345678'
                    orderNumber: 'order_number_1234'
                    referenceId: 'ref_s192i49i'
                    resultCode: 0
                    resultText: 'Successful transaction request'
                    requestedAmount: 1000
                    approvedAmount: 1000
                    balanceAmount: 0
                    transactionResponses:
                      [
                        {
                          responseCode: 1,
                          authCode: '000AAA',
                          amountApproved: 1000,
                          approvedAmountBreakdown:
                            { amountGoodsAndServices: 1000, tax: 0, cashBack: 0, tip: 0 },
                          paymentMethod:
                            {
                              id: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J',
                              type: 'token',
                              currency: 'USD',
                              description: "Token for John Doe's Visa",
                              maskedCardNumber: '************0011',
                              cardExpDate: '1225',
                            },
                          cardType: 'VISA',
                          avsResult: 'A',
                          cvvResult: 'M',
                          accountType: 'Credit',
                          hostResponseText: 'APPROVED 00',
                        },
                      ]
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/capture:
    post:
      operationId: capture
      summary: Capture
      description: |
        Complete a previously authorized transaction, resulting in a financial transaction. The amount can be equal to or less than the original authorization amount.

        #### Webhook Events

        The following webhook events will be triggered during the capture process:
        - `capture.completed` - when a transaction capture for a previously authorized transaction is completed.
      tags:
        - Transactions
      requestBody:
        description: The request to capture a previously authorized transaction.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptureRequest'
            examples:
              captureRequest:
                summary: Capture request example
                value:
                  referenceId: 'ref_s192i49i'
                  amount: 1000
                  invoiceNumber: 'inv_12345678'
                  orderNumber: 'order_number_1234'
      responses:
        '200':
          description: A successful capture response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptureResponse'
              examples:
                successfulResponse:
                  $ref: '#/components/examples/CaptureResponse'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/refund:
    post:
      operationId: refund
      summary: Refund
      description: |
        Process a referenced refund or void for a previously completed sale or capture transaction. If the transaction is in the current batch, the system will attempt to void it, otherwise it will be refunded resulting in a financial transaction.

        #### Webhook Events

        The following webhook events will be triggered during the refund process:
        - `refund.completed` - when a transaction void or refund for a previously completed transaction is completed.
      tags:
        - Transactions
      requestBody:
        description: The request to refund or void a previously completed transaction.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
            examples:
              refundRequest:
                summary: Refund request example
                value:
                  referenceId: 'ref_s192i49i'
                  amount: 1000
                  invoiceNumber: 'ref_inv_12345678'
                  orderNumber: 'ref_order_1234'
      responses:
        '200':
          description: A successful refund response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundResponse'
              examples:
                successfulResponse:
                  $ref: '#/components/examples/RefundResponse'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/unreferenced-physical-refund:
    post:
      operationId: unreferencedRefundCardPresent
      summary: Unreferenced Refund (Card Present)
      description: |
        Process an unreferenced refund without a matching completed sale or capture transaction using a physical payment terminal where the card is present.

        Note regarding Unreferenced Refunds - Unreferenced refunds are refunds that do not require a previously completed payment transaction to be referenced. They are only available on certain accounts by request to [support@integratedcommerce.io](mailto:support@integratedcommerce.io).

        #### Webhook Events

        The following webhook events will be triggered during the refund process:
        - `refund.completed` - when an unreferenced refund is completed.
        - `token.created` - when a card is tokenized and stored as a payment method.
      tags:
        - Transactions
      requestBody:
        description: The request to process an unreferenced refund using a physical payment terminal.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnreferencedPhysicalRefundRequest'
            examples:
              unreferencedPhysicalRefundRequest:
                summary: Unreferenced Card Present refund request example
                value:
                  amount: 1000
                  paymentMethodId: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
                  invoiceNumber: 'inv_12345678'
                  orderNumber: 'order_number_1234'
                  referenceId: 'ref_s192i49i'
      responses:
        '200':
          description: A successful Card Present unreferenced refund response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/TransactionResponseObject'
                  - type: object
                    properties:
                      paymentMethod:
                        allOf:
                          - $ref: '#/components/schemas/PaymentMethodDetails'
                          - type: object
                            description: |
                              The payment method used for this Card Present unreferenced refund.

                              If a new card was tokenized during the transaction, the tokenized card ID and details will be returned in the `transactionResponses`'s `paymentMethod` object.
                            properties:
                              id:
                                example: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
              examples:
                successfulResponse:
                  $ref: '#/components/examples/UnreferencedRefundCardPresentResponse'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /transactions/unreferenced-virtual-refund:
    post:
      operationId: unreferencedRefundCardNotPresent
      summary: Unreferenced Refund (Card Not Present)
      description: |
        Process an unreferenced refund without a matching completed sale or capture transaction using a hosted payment page or iframe where the card is not physically present.

        Note regarding Unreferenced Refunds - Unreferenced refunds are refunds that do not require a previously completed payment transaction to be referenced. They are only available on certain accounts by request to [support@integratedcommerce.io](mailto:support@integratedcommerce.io).

        #### Webhook Events

        The following webhook events will be triggered during the refund process:
        - `refund.completed` - when a transaction void or refund for a previously completed transaction is completed.
        - `token.created` - when a card is tokenized and stored as a payment method.
      tags:
        - Transactions
      requestBody:
        description: The request to process an unreferenced refund using a hosted payment page or iframe.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnreferencedVirtualRefundRequest'
            examples:
              unreferencedVirtualRefundRequest:
                summary: Unreferenced Card Not Present refund request example
                value:
                  amount: 1000
                  paymentMethodId: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
                  invoiceNumber: 'inv_12345678'
                  orderNumber: 'order_number_1234'
                  referenceId: 'ref_s192i49i'
                  returnUrl: 'https://merchant.example.com/payment-complete'
      responses:
        '200':
          description: A successful Card Not Present unreferenced refund response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CNPVirtualResponse'
              examples:
                successfulResponse:
                  summary: A successful response for a Card Not Present unreferenced refund transaction.
                  value:
                    id: 'trx_01J2F0EKHC7HY2R93C8ENBD1FG'
                    paymentMethod:
                      id: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
                      type: 'virtual'
                      currency: 'USD'
                      description: 'Online Checkout Iframe'
                    invoiceNumber: 'inv_12345678'
                    orderNumber: 'order_number_1234'
                    referenceId: 'ref_s192i49i'
                    requestedAmount: 1000
                    sessionId: 'ses_01JSFAMY0AGW27QKP30C727512'
                    iframeUrl: 'https://iframe.integratedcommerce.io/session/01JSFAMY0AGW27QKP30C727512'
                    expirationTimestamp: '2025-04-17T14:19:03Z'
                    status: 'pending'
        '400':
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

webhooks:
  SaleCompleted:
    post:
      operationId: webhookSaleCompleted
      tags:
        - Transaction Notifications
      summary: Sale completed
      description: This webhook event is triggered when a financial transaction is processed and completed.
      security: []
      parameters:
        - $ref: '#/components/parameters/WebhookSignatureHeader'
      requestBody:
        $ref: '#/components/requestBodies/SaleCompletedWebhook'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulWebhookAcknowledgement'

  AuthCompleted:
    post:
      operationId: webhookAuthCompleted
      tags:
        - Transaction Notifications
      summary: Auth completed
      description: This webhook event is triggered when a transaction authorization is completed.
      security: []
      parameters:
        - $ref: '#/components/parameters/WebhookSignatureHeader'
      requestBody:
        $ref: '#/components/requestBodies/AuthCompletedWebhook'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulWebhookAcknowledgement'

  CaptureCompleted:
    post:
      operationId: webhookCaptureCompleted
      tags:
        - Transaction Notifications
      summary: Capture completed
      description: This webhook event is triggered when a transaction capture for a previously authorized transaction is completed.
      security: []
      parameters:
        - $ref: '#/components/parameters/WebhookSignatureHeader'
      requestBody:
        $ref: '#/components/requestBodies/CaptureCompletedWebhook'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulWebhookAcknowledgement'

  RefundCompleted:
    post:
      operationId: webhookRefundCompleted
      tags:
        - Transaction Notifications
      summary: Refund completed
      description: This webook event is triggered when a transaction void or refund for a previously completed transaction is completed.
      security: []
      parameters:
        - $ref: '#/components/parameters/WebhookSignatureHeader'
      requestBody:
        $ref: '#/components/requestBodies/RefundCompletedWebhook'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulWebhookAcknowledgement'

  TokenCreated:
    post:
      operationId: webhookTokenCreated
      tags:
        - Token Notifications
      summary: Token created
      description: This webhook event is triggered when a card is tokenized and stored as a payment method.
      security: []
      parameters:
        - $ref: '#/components/parameters/WebhookSignatureHeader'
      requestBody:
        $ref: '#/components/requestBodies/TokenCreatedWebhook'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulWebhookAcknowledgement'

  TokenUpdated:
    post:
      operationId: webhookTokenUpdated
      tags:
        - Token Notifications
      summary: Token updated
      description: This webhook event is triggered when an expiration date for a previously tokenized card is updated.
      security: []
      parameters:
        - $ref: '#/components/parameters/WebhookSignatureHeader'
      requestBody:
        $ref: '#/components/requestBodies/TokenUpdatedWebhook'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulWebhookAcknowledgement'

  TokenRemoved:
    post:
      operationId: webhookTokenRemoved
      tags:
        - Token Notifications
      summary: Token removed
      description: This webhook event is triggered when a previously tokenized card is removed from the system.
      security: []
      parameters:
        - $ref: '#/components/parameters/WebhookSignatureHeader'
      requestBody:
        $ref: '#/components/requestBodies/TokenRemovedWebhook'
      responses:
        '200':
          $ref: '#/components/responses/SuccessfulWebhookAcknowledgement'
