- title: Hosted Payment Form
  slug: hosted-payment-form
  description: Understand how our Hosted Payment Form (HPF) works
  content: |
    # Hosted Payment Form

    The Integrated Commerce Omni-Channel Payment API offers a secure Hosted Payment Form (HPF) solution that simplifies payment collection while maintaining strong security and compliance standards.

    ## How It Works

    Our Hosted Payment Form system uses a session-based approach rather than static iframes. Here's how the flow works:

    <div style="padding-left: 20px; border-left: 3px solid #0969da; margin-bottom: 20px;">
    1. <strong>Initiate Session</strong>: Your backend server makes a POST request to our API (e.g., <code>/payment-methods/virtual</code>, <code>/transactions/virtual-sale</code>, etc.) with your transaction details.<br><br>

    2. <strong>Receive Session URL</strong>: Our API returns a short-lived, unique iframe URL specific to this transaction, along with a session ID and expiration timestamp.<br><br>

    3. <strong>Embed HPF</strong>: You embed this iframe URL in your payment page. The iframe contains a fully-styled, responsive payment form.<br><br>

    4. <strong>Customer Enters Payment Info</strong>: The customer enters their payment information (card details, billing address) directly into our secure form, which is isolated from your website's environment.<br><br>

    5. <strong>Payment Processing</strong>: When the customer submits the form, we process the payment in our secure environment.<br><br>

    6. <strong>Result Communication</strong>: Results are communicated back to your system in three ways:
       <ul>
         <li>Redirect: If you provided a <code>returnUrl</code> parameter, the customer will be redirected there with status information</li>
         <li>postMessage: A JavaScript event is sent to your parent window with transaction details</li>
         <li>Webhook: The complete transaction result is delivered via the appropriate webhook</li>
       </ul>
    </div>

    ## Security Benefits

    <div style="padding-left: 20px; border-left: 3px solid #0969da; margin-bottom: 20px;">
    <h3 style="margin-top: 0;">Enhanced Security</h3>
    <ul>
      <li>Each session is unique and tied to a specific transaction</li>
      <li>Payment details never touch your servers</li>
      <li>Session URLs are short-lived and expire automatically</li>
      <li>PCI compliance scope is significantly reduced for your organization</li>
    </ul>
    </div>

    ## Implementation Flow

    ### 1. Backend: Initiate the Payment Session

    Your backend server initiates the payment session by making a POST request to our payment API endpoint. This request includes your API key, the transaction amount, a return URL for redirecting customers after payment, and an optional reference ID for tracking.

    The API responds with a unique session identifier and a secure iframe URL. This session is temporary and designed specifically for this payment transaction.

    ### 2. Frontend: Display the Payment Form

    On your payment page, you'll embed the secure iframe URL received from our API. This iframe creates a boundary that isolates the payment form from your website, enhancing security.

    You'll also implement a message listener that waits for communication from the iframe. This listener should verify the origin of any messages for security and process the payment results accordingly.

    ### 3. Handling the Result

    When the payment is completed, the customer will be redirected to your `returnUrl` with query parameters indicating the transaction status and details:

    <div style="padding: 10px; background-color: rgba(240, 244, 248, 0.08); border-radius: 6px; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, monospace; overflow-x: auto; margin-bottom: 20px; border: 1px solid rgba(225, 228, 232, 0.2); font-size: 85%; color: inherit;">
    https://your-site.com/payment-complete?paymentMethodId=pmt_tkn_01JV9ZJHS5GKEBAJTXPF2TR6&resultCode=0&cardType=Visa&transactionId=trx_123456&referenceId=order_123456
    </div>

    Your page can then parse these parameters to display appropriate confirmation or error messages. Additionally, you'll receive a webhook notification with the complete transaction details that you can use for order fulfillment and record-keeping.

    ## Hosted Payment Form Appearance

    <div style="display: flex; margin-bottom: 20px;">
      <div style="flex: 1; padding-right: 20px;">
        <p>Our Hosted Payment Form provides a clean, professional payment interface that collects:</p>
        <ul>
          <li>Cardholder name</li>
          <li>Card number, expiration date, and security code</li>
          <li>Billing address details</li>
        </ul>
        <p>The form is responsive and works on mobile, tablet, and desktop devices.</p>
      </div>
      <div style="flex: 1; padding: 15px; border-radius: 6px; text-align: center;">
        <img src="https://fintechnav.com/images/HPP.png" alt="Hosted Payment Form Example" style="max-width: 100%; height: auto;" />
        <small style="display: block; margin-top: 10px; opacity: 0.7;">Example of the hosted payment form</small>
      </div>
    </div>

    ## Error Handling

    <div style="padding-left: 20px; border-left: 3px solid #0969da; margin-bottom: 20px;">
    If a payment session experiences an error or expires, the customer will see an appropriate error message. Your implementation should handle various response statuses, including:
    <ul>
      <li>Successful payments (resultCode = 0)</li>
      <li>Declined transactions</li>
      <li>Expired sessions</li>
      <li>Processing errors</li>
    </ul>
    </div>

    ## Implementation Best Practices

    <div style="padding-left: 20px; border-left: 3px solid #0969da; margin-bottom: 20px;">
      <h4 style="margin-top: 0; font-size: 16px;">Keep Session IDs Private</h4>
      <p>Never expose the full session ID in client-side code outside the iframe src.</p>
      
      <h4 style="margin-top: 15px; font-size: 16px;">Implement Proper Origin Validation</h4>
      <p>Always verify the origin of postMessage events.</p>
      
      <h4 style="margin-top: 15px; font-size: 16px;">Handle Timeouts Gracefully</h4>
      <p>Sessions expire after a short period, so provide clear messaging to users if this happens.</p>
      
      <h4 style="margin-top: 15px; font-size: 16px;">Test with Our Test Cards</h4>
      <p>Use our <a href="#test-cards">test cards</a> during your integration development.</p>
      
      <h4 style="margin-top: 15px; font-size: 16px;">Responsive Design</h4>
      <p>Ensure your payment page layout accommodates the iframe appropriately on all devices.</p>
    </div>
