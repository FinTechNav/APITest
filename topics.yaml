- title: Hosted Payment Page
  slug: hosted-payment-page
  description: Understand how our Hosted Payment Page (HPP) works
  content: |
    # Hosted Payment Page

    <div style="padding: 15px; background-color: rgba(240, 244, 248, 0.08); border: 1px solid rgba(225, 228, 232, 0.2); border-radius: 6px; margin-bottom: 20px; color: inherit;">
    The Integrated Commerce Omni-Channel Payment API offers a secure Hosted Payment Page (HPP) solution that simplifies payment collection while maintaining strong security and compliance standards.
    </div>

    ## How It Works

    Our Hosted Payment Page system uses a session-based approach rather than static iframes. Here's how the flow works:

    <div style="padding-left: 20px; border-left: 3px solid #0969da; margin-bottom: 20px;">
    1. <strong>Initiate Session</strong>: Your backend server makes a POST request to our API (e.g., <code>/payment-methods/virtual</code>, <code>/transactions/virtual-sale</code>, etc.) with your transaction details.

    2. <strong>Receive Session URL</strong>: Our API returns a short-lived, unique iframe URL specific to this transaction, along with a session ID and expiration timestamp.

    3. <strong>Embed HPP</strong>: You embed this iframe URL in your payment page. The iframe contains a fully-styled, responsive payment form.

    4. <strong>Customer Enters Payment Info</strong>: The customer enters their payment information (card details, billing address) directly into our secure form, which is isolated from your website's environment.

    5. <strong>Payment Processing</strong>: When the customer submits the form, we process the payment in our secure environment.

    6. <strong>Result Communication</strong>: Results are communicated back to your system in three ways:
       <ul>
         <li>Redirect: If you provided a <code>returnUrl</code> parameter, the customer will be redirected there with status information</li>
         <li>postMessage: A JavaScript event is sent to your parent window with transaction details</li>
         <li>Webhook: The complete transaction result is delivered via the appropriate webhook</li>
       </ul>
    </div>

    ## Security Benefits

    <div style="background-color: rgba(240, 244, 248, 0.08); padding: 15px; border-radius: 6px; margin-bottom: 20px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">
    <h3 style="margin-top: 0;">Enhanced Security</h3>
    <ul>
      <li>Each session is unique and tied to a specific transaction</li>
      <li>Payment details never touch your servers</li>
      <li>Session URLs are short-lived and expire automatically</li>
      <li>PCI compliance scope is significantly reduced for your organization</li>
    </ul>
    </div>

    ## Example Implementation Flow

    ### 1. Backend: Initiate the Payment Session

    javascript
    // Server-side code (Node.js example)
    const response = await fetch('https://api.omni.integratedcommerce.io/v1/transactions/virtual-sale', { 
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'x-api-key': 'your_api_key_here' 
      },
      body: JSON.stringify({ 
        amount: 1000, // $10.00
        returnUrl: 'https://your-site.com/payment-complete',
        referenceId: 'order_123456' // Optional: your reference ID 
      })
    });

    const data = await response.json();
    const { iframeUrl, sessionId } = data;

    // Send iframeUrl to your frontend

    ### 2. Frontend: Display the Payment Form

    html
    <div class="payment-container">
      <iframe 
        src="https://iframe.integratedcommerce.io/session/UNIQUE_SESSION_ID" 
        id="payment-iframe"
        style="width: 100%; height: 600px; border: none;"
        allowtransparency="true">
      </iframe>
    </div>

    <script>
    // Listen for messages from the iframe
    window.addEventListener('message', (event) => {
      // Verify origin for security
      if (event.origin.includes('integratedcommerce.io')) {
        const data = typeof event.data === 'string' 
          ? JSON.parse(event.data) 
          : event.data;
        
        if (data.status === 'completed') {
          // Payment successful - handle accordingly
          console.log('Payment successful:', data);
        } else if (data.status === 'error') {
          // Payment failed - handle error
          console.log('Payment error:', data.message);
        }
      }
    });
    </script>

    ### 3. Handling the Result

    When the payment is completed, the customer will be redirected to your `returnUrl` with query parameters indicating the transaction status and details:

    <div style="padding: 10px; background-color: rgba(240, 244, 248, 0.08); border-radius: 6px; font-family: SFMono-Regular, Consolas, 'Liberation Mono', Menlo, monospace; overflow-x: auto; margin-bottom: 20px; border: 1px solid rgba(225, 228, 232, 0.2); font-size: 85%; color: inherit;">
    https://your-site.com/payment-complete?paymentMethodId=pmt_tkn_01JV9ZJHS5GKEBAJTXPF2TR6&resultCode=0&cardType=Visa&transactionId=trx_123456&referenceId=order_123456
    </div>

    Your page can then parse these parameters to display appropriate confirmation or error messages.

    ## Hosted Payment Page Appearance

    <div style="display: flex; margin-bottom: 20px;">
      <div style="flex: 1; padding-right: 20px;">
        <p>Our Hosted Payment Page provides a clean, professional payment form that collects:</p>
        <ul>
          <li>Cardholder name</li>
          <li>Card number, expiration date, and security code</li>
          <li>Billing address details</li>
        </ul>
        <p>The form is responsive and works on mobile, tablet, and desktop devices.</p>
      </div>
      <div style="flex: 1; padding: 15px; border-radius: 6px; text-align: center;">
        <img src="https://fintechnav.com/images/HPP.png" alt="Hosted Payment Page Example" style="max-width: 100%; height: auto;" />
        <small style="display: block; margin-top: 10px; opacity: 0.7;">Example of the hosted payment form</small>
      </div>
    </div>

    ## Error Handling

    <div style="padding: 15px; background-color: rgba(240, 244, 248, 0.08); border-radius: 6px; margin-bottom: 20px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">
    If a payment session experiences an error or expires, the customer will see an appropriate error message. Your implementation should handle various response statuses, including:
    <ul>
      <li>Successful payments (resultCode = 0)</li>
      <li>Declined transactions</li>
      <li>Expired sessions</li>
      <li>Processing errors</li>
    </ul>
    </div>

    ## Implementation Best Practices

    <div style="background-color: rgba(240, 244, 248, 0.08); border-radius: 6px; margin-bottom: 20px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">
      <div style="padding: 15px; border-bottom: 1px solid rgba(225, 228, 232, 0.2);">
        <h4 style="margin: 0; font-size: 16px;">Keep Session IDs Private</h4>
        <p style="margin: 8px 0 0 0;">Never expose the full session ID in client-side code outside the iframe src.</p>
      </div>
      <div style="padding: 15px; border-bottom: 1px solid rgba(225, 228, 232, 0.2);">
        <h4 style="margin: 0; font-size: 16px;">Implement Proper Origin Validation</h4>
        <p style="margin: 8px 0 0 0;">Always verify the origin of postMessage events.</p>
      </div>
      <div style="padding: 15px; border-bottom: 1px solid rgba(225, 228, 232, 0.2);">
        <h4 style="margin: 0; font-size: 16px;">Handle Timeouts Gracefully</h4>
        <p style="margin: 8px 0 0 0;">Sessions expire after a short period, so provide clear messaging to users if this happens.</p>
      </div>
      <div style="padding: 15px; border-bottom: 1px solid rgba(225, 228, 232, 0.2);">
        <h4 style="margin: 0; font-size: 16px;">Test with Our Test Cards</h4>
        <p style="margin: 8px 0 0 0;">Use our <a href="#test-cards">test cards</a> during your integration development.</p>
      </div>
      <div style="padding: 15px;">
        <h4 style="margin: 0; font-size: 16px;">Responsive Design</h4>
        <p style="margin: 8px 0 0 0;">Ensure your payment page layout accommodates the iframe appropriately on all devices.</p>
      </div>
    </div>

- title: Test Cards
  slug: test-cards
  description: Test cards for integration testing
  content: |
    # Test Cards

    <div style="padding: 15px; background-color: rgba(240, 244, 248, 0.08); border-radius: 6px; margin-bottom: 20px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">
    Select relevant test cards for your testing.
    </div>

    ## Physical Test Cards for Card Present Transactions

    <div style="padding: 15px; background-color: rgba(240, 244, 248, 0.08); border-radius: 6px; margin-bottom: 20px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">
    <p>For in-person payment terminal testing, physical EMV and contactless test cards are required to properly validate your Card Present integration. These specialized test cards contain real chips, magnetic stripes, and contactless antennas with test payment applications that simulate actual card behavior.</p>

    <p>Physical test cards are essential for ensuring your payment terminals properly handle chip insertions, contactless taps, and various payment scenarios in a controlled test environment. They allow merchants, developers, and processors to thoroughly test transaction workflows, terminal software, and integration with your payment system before going live.</p>

    <p>If you already have a set of B2 test cards for EMV and contactless testing, you are all set for Card Present testing. If you don't have physical test cards, please contact <a href="mailto:support@integratedcommerce.io">support@integratedcommerce.io</a> and we'll provide information on how to obtain the appropriate test card set for your needs.</p>
    </div>

    ## Virtual Test Cards for Card Not Present Transactions

    <div style="padding: 15px; background-color: rgba(240, 244, 248, 0.08); border-radius: 6px; margin-bottom: 20px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">
    The following test cards can be used for online payment testing (Card Not Present transactions) in your development environment.
    </div>

    <div style="overflow-x: auto; margin-bottom: 20px;">
      <table style="width: 100%; border-collapse: collapse;">
        <thead>
          <tr style="background-color: rgba(240, 244, 248, 0.15);">
            <th style="padding: 10px; text-align: left; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">Card Type</th>
            <th style="padding: 10px; text-align: left; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">Card Number</th>
            <th style="padding: 10px; text-align: left; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">Expiry</th>
            <th style="padding: 10px; text-align: left; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">CVV</th>
            <th style="padding: 10px; text-align: left; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">Result</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">Visa</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">4111 1111 1111 1111</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">12/25</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">123</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2);"><span style="color: #4ade80;">Approved</span></td>
          </tr>
          <tr style="background-color: rgba(240, 244, 248, 0.05);">
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">Mastercard</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">5555 5555 5555 4444</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">12/25</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">123</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2);"><span style="color: #4ade80;">Approved</span></td>
          </tr>
          <tr>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">Visa</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">4111 1111 1111 1112</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">12/25</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">123</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2);"><span style="color: #f87171;">Declined</span></td>
          </tr>
          <tr style="background-color: rgba(240, 244, 248, 0.05);">
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">American Express</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">3782 822463 10005</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">12/25</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">1234</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2);"><span style="color: #4ade80;">Approved</span></td>
          </tr>
          <tr>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">Discover</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">6011 1111 1111 1117</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">12/25</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">123</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2);"><span style="color: #4ade80;">Approved</span></td>
          </tr>
        </tbody>
      </table>
    </div>

    <div style="padding: 15px; background-color: rgba(240, 244, 248, 0.08); border-radius: 6px; margin-bottom: 20px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">
    <strong>Note:</strong> For testing AVS (Address Verification Service) responses, use any of the above card numbers with the following test addresses:
    </div>

    <div style="overflow-x: auto; margin-bottom: 20px;">
      <table style="width: 100%; border-collapse: collapse;">
        <thead>
          <tr style="background-color: rgba(240, 244, 248, 0.15);">
            <th style="padding: 10px; text-align: left; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">Address</th>
            <th style="padding: 10px; text-align: left; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">Zip/Postal Code</th>
            <th style="padding: 10px; text-align: left; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">AVS Result</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">123 Main St</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">12345</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2);"><code>Y</code> - Address and ZIP match</td>
          </tr>
          <tr style="background-color: rgba(240, 244, 248, 0.05);">
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">123 Main St</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">54321</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2);"><code>A</code> - Address matches, ZIP does not</td>
          </tr>
          <tr>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">456 Oak Ave</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2); color: inherit;">12345</td>
            <td style="padding: 10px; border: 1px solid rgba(225, 228, 232, 0.2);"><code>Z</code> - ZIP matches, address does not</td>
          </tr>
        </tbody>
      </table>
    </div>
