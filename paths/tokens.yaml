createCardPresentToken:
  post:
    operationId: createCardPresentToken
    summary: Create Token (Card Present)
    description: |
      Tokenize a card using a physical terminal. A verification transaction or $0 authorization will occur to validate the card. If valid, the card and expiration date will be tokenized and stored and a paymentMethodId will be returned for future Card On File transactions.

      #### Webhook Events

      The following webhook events will be triggered during the tokenization process:
      - `token.created` - when a card is tokenized and stored as a payment method.
    tags:
      - Tokens
    requestBody:
      description: The request to tokenize a card using a physical terminal.
      required: true
      content:
        application/json:
          schema:
            $ref: "../components/schemas/transactions.yaml#/CardOnFileAddRequest"
          examples:
            cofAddRequest:
              summary: Card On File Add request example
              value:
                paymentMethodId: "pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF"
                referenceId: "ref_add_card_12345"
    responses:
      "200":
        description: A successful card tokenization response
        content:
          application/json:
            schema:
              $ref: "../components/schemas/transactions.yaml#/CardOnFileAddResponse"
            examples:
              successfulResponse:
                $ref: "../components/examples.yaml#/CreateTokenCardPresentResponse"
      "400":
        description: Request Error
        content:
          application/json:
            schema:
              allOf:
                - $ref: "../components/schemas/errors.yaml#/Error"
                - type: object
                  properties:
                    errorDetails:
                      allOf:
                        - $ref: "../components/schemas/errors.yaml#/ValidationError"
                        - type: object
                          properties:
                            field:
                              example: "paymentMethodId"
                            details:
                              example: "'PaymentMethodId' must not be empty."
      "401":
        $ref: "../components/responses.yaml#/UnauthorizedError"

createCardNotPresentToken:
  post:
    operationId: createCardNotPresentToken
    summary: Create Token (Card Not Present)
    description: |
      Tokenize a card using a hosted payment page/iframe. A verification transaction or $0 authorization will occur to validate the card. If valid, a tokenized card ID will be stored and a paymentMethodId will be returned for future Card On File transactions.

      #### Webhook Events

      The following webhook events will be triggered during the tokenization process:
      - `token.created` - when a card is tokenized and stored as a payment method.
    tags:
      - Tokens
    requestBody:
      description: The request to tokenize a card using a hosted payment page or iframe.
      required: true
      content:
        application/json:
          schema:
            $ref: "../components/schemas/transactions.yaml#/CardOnFileVirtualAddRequest"
          examples:
            cofVirtualAddRequest:
              summary: Card Not Present Token Creation request example
              value:
                paymentMethodId: "pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS"
                referenceId: "ref_add_card_12345"
                returnUrl: "https://merchant.example.com/payment-complete"
    responses:
      "200":
        description: A successful Card Not Present tokenization response
        content:
          application/json:
            schema:
              $ref: "../components/schemas/transactions.yaml#/CardOnFileVirtualAddResponse"
            examples:
              successfulResponse:
                summary: A successful response for a Card Not Present tokenization transaction.
                value:
                  id: "trx_01J2F0ZJ2JW5B63CJFPXRGAB1S"
                  paymentMethod:
                    id: "pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS"
                    type: "virtual"
                    currency: "USD"
                    description: "Online Checkout Iframe"
                  referenceId: "ref_add_card_12345"
                  requestedAmount: 0
                  sessionId: "ses_01JSFAMY0AGW27QKP30C727512"
                  iframeUrl: "https://iframe.integratedcommerce.io/session/01JSFAMY0AGW27QKP30C727512"
                  expirationTimestamp: "2025-04-17T14:19:03Z"
                  status: "pending"
      "400":
        description: Request Error
        content:
          application/json:
            schema:
              allOf:
                - $ref: "../components/schemas/errors.yaml#/Error"
                - type: object
                  properties:
                    errorDetails:
                      allOf:
                        - $ref: "../components/schemas/errors.yaml#/ValidationError"
                        - type: object
                          properties:
                            field:
                              example: "paymentMethodId"
                            details:
                              example: "'PaymentMethodId' must not be empty."
      "401":
        $ref: "../components/responses.yaml#/UnauthorizedError"

tokenOperations:
  put:
    operationId: updateToken
    summary: Update Token
    description: |
      Update the expiration date for a previously tokenized card.

      #### Webhook Events

      The following webhook events will be triggered during the tokenized card update process:
      - `token.updated` - when an expiration date for a previously tokenized card is updated.
    tags:
      - Tokens
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the tokenized card to update.
        schema:
          type: string
        example: pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J
    requestBody:
      description: The request to update a previously tokenized card.
      required: true
      content:
        application/json:
          schema:
            $ref: "../components/schemas/transactions.yaml#/CardOnFileUpdateRequest"
          examples:
            cofUpdateRequest:
              summary: Card On File Update request example
              value:
                referenceId: "ref_update_card_12345"
                cardExpDate: "1225"
    responses:
      "200":
        description: A successful card update response
        content:
          application/json:
            schema:
              $ref: "../components/schemas/transactions.yaml#/CardOnFileUpdateResponse"
            examples:
              successfulResponse:
                $ref: "../components/examples.yaml#/UpdateTokenResponse"
      "400":
        description: Request Error
        content:
          application/json:
            schema:
              allOf:
                - $ref: "../components/schemas/errors.yaml#/Error"
                - type: object
                  properties:
                    errorDetails:
                      allOf:
                        - $ref: "../components/schemas/errors.yaml#/ValidationError"
                        - type: object
                          properties:
                            field:
                              example: "cardExpDate"
                            details:
                              example: "The length of 'CardExpDate' must be 4 characters or fewer."
      "401":
        $ref: "../components/responses.yaml#/UnauthorizedError"

  delete:
    operationId: removeToken
    summary: Remove Token
    description: |
      Remove a previously tokenized card from the system.

      #### Webhook Events

      The following webhook events will be triggered during the tokenized card removal process:
      - `token.removed` - when a previously tokenized card is removed from the system.
    tags:
      - Tokens
    parameters:
      - name: id
        in: path
        required: true
        description: The ID of the tokenized card to remove.
        schema:
          type: string
        example: pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J
      - name: referenceId
        in: query
        required: false
        description: A reference ID to tag and track this transaction for reconciliation.
        schema:
          type: string
        example: ref_remove_card_12345
    responses:
      "200":
        description: A successful card removal response
        content:
          application/json:
            schema:
              $ref: "../components/schemas/transactions.yaml#/CardOnFileRemoveResponse"
            examples:
              successfulResponse:
                $ref: "../components/examples.yaml#/RemoveTokenResponse"
      "400":
        description: Request Error
        content:
          application/json:
            schema:
              allOf:
                - $ref: "../components/schemas/errors.yaml#/Error"
                - type: object
                  properties:
                    errorDetails:
                      allOf:
                        - $ref: "../components/schemas/errors.yaml#/ValidationError"
                        - type: object
                          properties:
                            field:
                              example: "id"
                            details:
                              example: "'Id' must not be empty."
      "401":
        $ref: "../components/responses.yaml#/UnauthorizedError"