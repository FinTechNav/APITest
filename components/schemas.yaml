ResponseCode:
  type: number
  enum: [0, 1, 2, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 50, 51, 52, 53, 54, 55, 56]
  description: >
    Response codes:
     * `0` - UNKNOWN
     * `1` - APPROVED - Transaction was approved
     * `2` - PARTIAL_APPROVED - Transaction was partially approved, but not for the full requested amount.
     * `10` - DECLINED - Declined by the issuer or bank.
     * `11` - INSUFFICIENT_FUNDS - Rejected due to insufficient funds in the account.
     * `12` - CARD_EXPIRED - The card used for the transaction has expired.
     * `13` - FRAUD_SUSPECTED - The transaction was flagged for potential fraud.
     * `14` - INVALID_PAYMENT_INFO - The provided information is invalid (e.g.: card number).
     * `15` - LIMIT_EXCEEDED - Rejected due to reaching a limit (e.g.: credit limit).
     * `16` - VERIFICATION_REQUIRED - Additional customer verification is required for the transaction to proceed (e.g.: 3D Secure).
     * `17` - AUTHENTICATION_FAILED - Rejected due to incorrect PIN or authentication failure.
     * `18` - POLICY_VIOLATION - Rejected due to a violation of the payment gateway's terms of service or policies.
     * `19` - BATCH_EMPTY - Indicates that the batch for processing is empty.
     * `20` - RECORD_NOT_FOUND - Indicates that the requested record for a transaction was not found (e.g.: to VOID a reference).
     * `21` - ALREADY_VOIDED - Indicates that the transaction has already been voided and cannot be processed again.
     * `50` - NETWORK_ERROR - Rejected due to network or communication issues with the payment gateway.
     * `51` - INVALID_ECR_PARAMETER - Terminal or system-specific errors.
     * `52` - NOT_SUPPORTED - Rejected because the requested operation is not supported.
     * `53` - BUSY_OR_UNAVAILABLE - Terminal or system is busy or unavailable.
     * `54` - CANCELLED - Cancelled by the user or merchant.
     * `55` - USER_CANCELLED - Specific to scenarios where the user cancels the transaction.
     * `56` - TIMED_OUT_ON_USER_INPUT - Failed to complete the transaction in time.

CardType:
  type: string
  enum:
    [
      UNKNOWN,
      DEBIT,
      VISA,
      MASTERCARD,
      AMEX,
      DINERS,
      DISCOVER,
      JCB,
      UNIONPAY,
      GIFT,
      CASH,
      EBT,
      OTHER,
    ]
  description: >
    The type of card used for this transaction:
     * `UNKNOWN` - The card type is unknown
     * `DEBIT` - Debit Card
     * `VISA` - Visa Credit Card
     * `MASTERCARD` - MasterCard Credit Card
     * `AMEX` - American Express Credit Card
     * `DINERS` - Diners Club Credit Card
     * `DISCOVER` - Discover Credit Card
     * `JCB` - JCB Credit Card
     * `UNIONPAY` - UnionPay Credit Card
     * `GIFT` - Gift Card
     * `CASH` - All-cash Transaction
     * `EBT` - Electronic Benefits Transfer Card
     * `OTHER` - Other tender types

CVVResult:
  type: string
  enum: [M, N, P, S, U]
  description: >
    The CVV verification result. Typically returned on Card Not Present transactions.
     * `M` - CVV Match
     * `N` - CVV No Match
     * `P` - Not Processed
     * `S` - CVV should be on the card but the merchant indicates it is not.
     * `U` - User is unregistered

    NOTE: Transactions can still be authorized if the CVV responses are no match or failure. CVV responses are for merchant information only, and usually do not influence the overall Authorization result. This can vary based on the Issuing Bank.

AVSResult:
  type: string
  enum: [A, E, N, R, S, U, G, W, X, Y, Z]
  description: >
    The AVS (Address Verification Service) result. Typically returned on Card Not Present transactions.
     * `A` - Address matches, ZIP does not. The first five numerical characters contained in the address match those stored at the VIC or issuer's center. However, the ZIP code does not match.
     * `E` - Ineligible transaction.
     * `N` - Neither address nor ZIP matches. Neither the first five numerical characters contained in the address match with those stored at the VIC nor issuer's center nor the ZIP code match.
     * `R` - Retry (system unavailable or timed out).
     * `S` - Card type not supported. The card type for this transaction is not supported by AVS. AVS can verify addresses for Visa cards, MasterCard, proprietary cards, and private label transactions.
     * `U` - Address information unavailable.
     * `G` - Address information unavailable, International - Visa only, The address information was not available at the VIC or issuer's center.
     * `W` - Nine-digit ZIP match, address does not. The nine-digit Postal ZIP code matches that stored at the VIC or card issuer's centre. However, the first five numerical characters contained in the address do not match.
     * `X` - Exact match (nine digit ZIP and address). Both the nine-digit Postal ZIP code as well as the first five numerical characters contained in the address match.
     * `Y` - Address and five-digit ZIP match. Both the five-digit Postal ZIP code as well as the first five numerical characters contained in the address match.
     * `Z` - Five-digit ZIP matches, address does not. The five-digit Postal ZIP code matches that stored at the VIC or card issuer's centre.

    NOTE: Transactions can still be authorized if the AVS responses are no match or failure. AVS responses are for merchant information only, and usually do not influence the overall Authorization result. This can vary based on the Issuing Bank.

ValidationError:
  type: object
  description: Represents a validation error that occurred during the request.
  properties:
    code:
      type: number
      description: Error code
      example: 2000
    field:
      type: string
      description: The field with the error
      example: amount
    message:
      type: string
      description: Error message
      example: Request validation failed
    details:
      type: string
      description: Additional details about the error
      example: "'Amount' must be between 1 and 999999999."

Receipt:
  type: object
  description: The receipt associated with this transaction.
  properties:
    lines:
      type: array
      items:
        type: string
      description: The receipt lines.
      example:
        [
          '     Test Merchant      ',
          '      300 S Wacker      ',
          '         Loop,          ',
          '                        ',
          '                        ',
          'TERM #          11000367',
          'RECORD #         0656191',
          'HOST INVOICE #    000038',
          'HOST SEQ #    1720656191',
          'MERCH INVOICE.  fgj24344',
          '------------------------',
          'CARD    ************0011',
          'VISA             Contact',
          '07/10/2024      20:03:05',
          '------------------------',
          'Purchase       CAD $1.00',
          'Tip            CAD $0.00',
          'Cashback       CAD $0.00',
          '       ',
          'TOTAL          CAD $1.00',
          '------------------------',
          'AUTH#:794697       B:171',
          '          Sale          ',
          '      APPROVED 00       ',
          '       THANK YOU        ',
          '                        ',
          '      Visa Credit       ',
          'AID:      A0000000031010',
          'TC:     43F4ACF64B07551A',
          'TVR:          8000008000',
          'TSI:                7800',
          '  Retain this copy for  ',
          '  statement validation ',
          '                        ',
          '                        ',
          '                        ',
          '                        ',
          '                        ',
          '                        ',
          '                        ',
          '     MERCHANT COPY      ',
          '     Test Merchant      ',
          '      300 S Wacker      ',
          '         Loop,          ',
          '                        ',
          '                        ',
          'TERM #          11000367',
          'RECORD #         0656191',
          'HOST INVOICE #    000038',
          'HOST SEQ #    1720656191',
          'MERCH INVOICE.  fgj24344',
          '------------------------',
          'CARD    ************0011',
          'VISA             Contact',
          '07/10/2024      20:03:05',
          '------------------------',
          'Purchase       CAD $1.00',
          'Tip            CAD $0.00',
          'Cashback       CAD $0.00',
          '       ',
          'TOTAL          CAD $1.00',
          '------------------------',
          'AUTH#:794697       B:171',
          '          Sale          ',
          '      APPROVED 00       ',
          '       THANK YOU        ',
          '                        ',
          '      Visa Credit       ',
          'AID:      A0000000031010',
          'TC:     43F4ACF64B07551A',
          'TVR:          8000008000',
          'TSI:                7800',
          '  Retain this copy for  ',
          '  statement validation ',
          '                        ',
          '                        ',
          '                        ',
          '                        ',
          '                        ',
          '                        ',
          '                        ',
          '     CUSTOMER COPY      ',
        ]

ApprovedAmountBreakdown:
  type: object
  description: A breakdown of approvedAmount, where each amounts approved on the payment terminal are returned separately.
  properties:
    amountGoodsAndServices:
      type: number
      description: The approved amount for goods and services.
      example: 1000
    tax:
      type: number
      description: The approved tax amount.
      example: 0
    cashBack:
      type: number
      description: The approved cashback amount.
      example: 0
    tip:
      type: number
      description: The approved tip amount.
      example: 0

ReferenceId:
  type: string
  maxLength: 100
  description: >
    A reference ID to tag and track this transaction for reconciliation. The reference ID
    is also used for processing referenced refunds. This value can be set by the merchant,
    or a unique reference ID will be generated automatically if not set by the merchant.
  example: ref_s192i49i

ReferenceIdForResponse:
  type: string
  maxLength: 100
  description: >
    The value returned will either be the reference ID set in the transaction request or if
    no value was set, it will be a value that is generated automatically by the system.
    The reference ID is needed for processing referenced transactions like captures and refunds.
  example: ref_s192i49i

ReferenceIdForCapture:
  type: string
  maxLength: 100
  description: >
    The reference ID that identifies the original authorization transaction being captured.
  example: ref_s192i49i

ReferenceIdForRefund:
  type: string
  maxLength: 100
  description: >
    The reference ID that identifies the original transaction being refunded.
  example: ref_s192i49i

InvoiceNumber:
  type: string
  maxLength: 100
  description: >
    An optional alphanumeric invoice number for this transaction.
    If provided, the same value will be populated in the response.
  example: inv_12345678

OrderNumber:
  type: string
  maxLength: 100
  description: >
    An optional alphanumeric order number for this transaction.
    If provided, the same value will be populated in the response.
  example: order_number_1234

Amount:
  type: number
  format: uint32
  minimum: 1
  maximum: 999999999
  description: >
    The total transaction amount. This is the full amount that will be processed in the transaction. Transaction amounts are positive integers representing the amount in its smallest denomination of the configured currency (e.g. cents for USD or CAD).
  example: 1000

AmountBreakdown:
  type: object
  description: Optional fields to specify the portion of the total transaction amount that represents goods/services, tax, cashback and/or tip. These values are for reporting purposes only and will not be added to the Amount field. These amount are represented as a positive integer in the smallest denomination of the configured currency (e.g. cents for USD or CAD).
  properties:
    amountGoodsAndServices:
      type: number
      description: The amount for goods and services.
      example: 1000
    tax:
      type: number
      description: The tax amount.
      example: 0
    cashBack:
      type: number
      description: The cashback amount.
      example: 0
    tip:
      type: number
      description: The tip amount.
      example: 0

AmountToCapture:
  type: number
  format: uint32
  minimum: 1
  maximum: 999999999
  description: >
    The amount to capture. Must be less than or equal to the original authorization amount. If not specified, the full authorized amount will be captured.
  example: 1000

AmountToRefund:
  type: number
  format: uint32
  minimum: 1
  maximum: 999999999
  description: >
    The requested amount to refund or void. If not specified, the full transaction amount will be refunded or voided. For partial refunds, must be less than the original transaction amount.
  example: 1000

AmountToRefundUnreferenced:
  type: number
  format: uint32
  minimum: 1
  maximum: 999999999
  description: The requested amount to refund.
  example: 1000

ResultCode:
  type: number
  enum:
    [0, 1003, 1005, 3000, 3002, 3005, 3006, 3009, 3010, 3011, 3012, 3013, 3014, 3020, 9998, 9999]
  description: |
    Result codes:
    * `0` - Successful transaction request. (Check each transactionResponse's responseCode to determine if a transaction was approved or declined)
    * `1003` - No payment terminal available.
    * `1005` - The specified terminal could not be found.
    * `3000` - An unexpected error occurred. Please try again.
    * `3002` - The transaction could not be completed because the payment terminal could not find the related transaction.
    * `3005` - To resolve this error, power off your payment terminal, wait one minute and retry the transaction. If the error persists, please contact support.
    * `3006` - The transaction could not be completed because the payment terminal is low on battery.
    * `3009` - The transaction could not be completed because of network connectivity issues with the payment terminal. Please restore connectivity and try again.
    * `3010` - The transaction took too long and was cancelled by the application.
    * `3011` - Invalid transaction request. Please consult the documentation for valid transaction requests.
    * `3012` - Invalid transaction request. paymentMethodId is invalid.
    * `3013` - Invalid transaction request. The specified amount appears to be incorrect. Please retry with a smaller amount.
    * `3014` - Invalid amount. Please try your transaction again with an amount greater than $0.
    * `3020` - An unsupported transaction result was received.
    * `9998` - The system is not ready to process a transaction.
    * `9999` - An unknown error has occurred. If available, an auxiliary error code will be provided in the message.

ResultText:
  type: string
  description: A message describing the result code in more detail.
  example: 'Successful transaction request'

PaymentMethodDetails:
  type: object
  description: The payment method used for this transaction.
  properties:
    id:
      type: string
      description: The unique identifier of the payment method. This ID has a prefix that makes it human-readable (pmt_trm_* for physical terminals, pmt_vrt_* for virtual terminals, pmt_tkn_* for tokenized cards), but applications should always use the `type` field to determine the payment method type rather than parsing this ID.
      example: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
    type:
      type: string
      enum: [physical, virtual, token]
      description: |
        The type of payment method:
        - `physical` - A physical payment terminal for Card Present transactions
        - `virtual` - A hosted payment page/iframe for Card Not Present transactions
        - `token` - A tokenized card for card-on-file transactions
      example: 'token'
    currency:
      type: string
      enum: [USD, CAD]
      description: The currency of the payment method.
      example: 'USD'
    description:
      type: string
      description: A human-readable name for the payment method.
      example: "Token for John Doe's Visa"
    maskedCardNumber:
      type: string
      description: The masked card number.
      example: '************0011'
    cardExpDate:
      type: string
      description: The expiration date of the card in MMYY format.
      example: '1225'
  required:
    - id
    - type
    - currency

TransactionResponse:
  type: object
  description: A single Sale Transaction may result in multiple Responses.
  properties:
    responseCode:
      $ref: '#/components/schemas/ResponseCode'
    authCode:
      type: string
      description: The authorization code provided by the card issuer, confirming transaction approval.
      example: 000AAA
    amountApproved:
      type: number
      description: The amount approved for this transaction response.
      example: 1000
    approvedAmountBreakdown:
      $ref: '#/components/schemas/ApprovedAmountBreakdown'
    paymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethodDetails'
        - type: object
          description: The payment method used for this transaction response.
    cardType:
      $ref: '#/components/schemas/CardType'
    avsResult:
      $ref: '#/components/schemas/AVSResult'
    cvvResult:
      $ref: '#/components/schemas/CVVResult'
    accountType:
      type: string
      description: The account type of the card (e.g. Credit or Debit)
      example: Credit
    hostResponseText:
      type: string
      description: A meaningful text explaining the response code from the host.
      example: 'APPROVED 00'
    receipt:
      $ref: '#/components/schemas/Receipt'

Error:
  type: object
  description: Represents an error that occurred during the request.
  properties:
    message:
      type: string
      description: Developer-facing error message.
      example: Request failed validation
    code:
      type: number
      enum: [1000, 2000, 3000, 9000]
      description: >
        Numeric error code. These are grouped into ranges for easier identification and troubleshooting.
        Error codes:
         * `1000` - AuthenticationGenericError
         * `2000` - RequestValidationGenericError
         * `3000` - UnknownServerGenericError
         * `9000` - UnhandledGenericError
      example: 2000
    status:
      type: number
      enum: [0, 1, 2, 3]
      description: >
        Execution status of the request sent to the payment gateway.

        Status codes:
         * `0` - UNKNOWN
         * `1` - COMPLETED - The request completed successfully.
         * `2` - REJECTED - The request was rejected by the payment gateway.
         * `3` - INTERRUPTED - The request was interrupted, and the final status is unknown.
      example: 1
    errorDetails:
      type: array
      items:
        $ref: '#/components/schemas/ValidationError'

CardPresentRequest:
  type: object
  description: Represents the request to process a Card Present transaction using a physical payment terminal.
  properties:
    amount:
      $ref: '#/components/schemas/Amount'
    amountBreakdown:
      $ref: '#/components/schemas/AmountBreakdown'
    paymentMethodId:
      type: string
      description: |
        The ID of the physical payment terminal that will process this Card Present transaction.

        - Example format: `pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF`
        - OPTIONAL ONLY if you have a single terminal configured
        - REQUIRED if you have multiple virtual and/or physical terminals configured

        You can retrieve all available physical payment terminal IDs for your account using the [`GET /payment-methods`](#operation-getpaymentmethods) endpoint.
      example: pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
    referenceId:
      $ref: '#/components/schemas/ReferenceId'
  required:
    - amount

CardNotPresentRequest:
  type: object
  description: Represents the request to process a Card Not Present transaction using a hosted payment page or iframe.
  properties:
    amount:
      $ref: '#/components/schemas/Amount'
    amountBreakdown:
      $ref: '#/components/schemas/AmountBreakdown'
    paymentMethodId:
      type: string
      description: |
        The ID of the hosted payment page or iframe that will collect card information for this Card Not Present transaction.

        - Example format: `pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS`
        - OPTIONAL ONLY if you have a single hosted payment page configured
        - REQUIRED if you have multiple virtual and/or physical terminals configured

        You can retrieve all available hosted payment page or iframe IDs for your account using the [`GET /payment-methods`](#operation-getpaymentmethods) endpoint.
      example: pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
    referenceId:
      $ref: '#/components/schemas/ReferenceId'
    returnUrl:
      type: string
      description: Will be used to redirect user back to merchant's site after iframe completed or canceled if provided.
      example: https://merchant.example.com/payment-complete
  required:
    - amount

CardOnFileRequest:
  type: object
  description: Represents the request to process a Card On File transaction using a tokenized card.
  properties:
    amount:
      $ref: '#/components/schemas/Amount'
    amountBreakdown:
      $ref: '#/components/schemas/AmountBreakdown'
    paymentMethodId:
      type: string
      description: |
        The ID of the tokenized card that will be used for this Card On File transaction.

        - Example format: `pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J`
        - ALWAYS REQUIRED when using a tokenized card
      example: pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
    referenceId:
      $ref: '#/components/schemas/ReferenceId'
  required:
    - amount
    - paymentMethodId

CaptureRequest:
  type: object
  description: Represents the request to capture a previously authorized transaction.
  properties:
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForCapture'
    amount:
      $ref: '#/components/schemas/AmountToCapture'
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
  required:
    - referenceId

RefundRequest:
  type: object
  description: Represents the request to refund or void a previously completed transaction.
  properties:
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForRefund'
    amount:
      $ref: '#/components/schemas/AmountToRefund'
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
  required:
    - referenceId

UnreferencedPhysicalRefundRequest:
  type: object
  description: Represents the request to process a Card Present unreferenced refund without a matching completed sale or capture transaction.
  properties:
    amount:
      $ref: '#/components/schemas/AmountToRefundUnreferenced'
    paymentMethodId:
      type: string
      description: |
        The ID of the physical payment terminal that will process this Card Present unreferenced refund.

        - Example format: `pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF`
        - OPTIONAL ONLY if you have a single terminal configured
        - REQUIRED if you have multiple virtual and/or physical terminals configured

        You can retrieve all available physical payment terminal IDs for your account using the [`GET /payment-methods`](#operation-getpaymentmethods) endpoint.
      example: pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
    referenceId:
      $ref: '#/components/schemas/ReferenceId'
  required:
    - amount

UnreferencedVirtualRefundRequest:
  type: object
  description: Represents the request to process a Card Not Present unreferenced refund without a matching completed sale or capture transaction.
  properties:
    amount:
      $ref: '#/components/schemas/AmountToRefundUnreferenced'
    paymentMethodId:
      type: string
      description: |
        The ID of the hosted payment page or iframe that will collect card information for this Card Not Present unreferenced refund.

        - Example format: `pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS`
        - OPTIONAL ONLY if you have a single hosted payment page configured
        - REQUIRED if you have multiple virtual and/or physical terminals configured

        You can retrieve all available hosted payment page or iframe IDs for your account using the [`GET /payment-methods`](#operation-getpaymentmethods) endpoint.
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
    referenceId:
      $ref: '#/components/schemas/ReferenceId'
    returnUrl:
      type: string
      description: Will be used to redirect user back to merchant's site after iframe completed or canceled if provided.
      example: https://merchant.example.com/refund-complete
  required:
    - amount

CardOnFileAddRequest:
  type: object
  description: Represents the request to tokenize a card using a physical terminal.
  properties:
    paymentMethodId:
      type: string
      description: |
        The ID of the payment method (physical terminal) to use for adding a card.
        You can retrieve all available payment method IDs for your account using the [`GET /payment-methods`](#operation-getpaymentmethods) endpoint.
      example: pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF
    referenceId:
      $ref: '#/components/schemas/ReferenceId'
  required:
    - paymentMethodId

CardOnFileVirtualAddRequest:
  type: object
  description: Represents the request to tokenize a card using a hosted payment page or iframe.
  properties:
    paymentMethodId:
      type: string
      description: |
        The ID of the payment method (hosted payment page/iframe) to use for adding a card.
        You can retrieve all available payment method IDs for your account using the [`GET /payment-methods`](#operation-getpaymentmethods) endpoint.
      example: pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS
    referenceId:
      $ref: '#/components/schemas/ReferenceId'
    returnUrl:
      type: string
      description: Will be used to redirect user back to merchant's site after iframe completed or canceled if provided.
      example: https://merchant.example.com/payment-complete
  required:
    - paymentMethodId

CardOnFileUpdateRequest:
  type: object
  description: Represents the request to update a previously tokenized card.
  properties:
    referenceId:
      $ref: '#/components/schemas/ReferenceId'
    cardExpDate:
      type: string
      description: The new expiration date of the card in MMYY format.
      example: '1225'
  required:
    - cardExpDate

CNPVirtualResponse:
  type: object
  description: Represents the response to a Card Not Present sale or authorization using a hosted payment page or iframe.
  properties:
    id:
      type: string
      description: Unique ID for this transaction.
      example: 'trx_01J2F0EKHC7HY2R93C8ENBD1FG'
    paymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethodDetails'
        - type: object
          description: The payment method used for this Card Not Present transaction.
          properties:
            id:
              example: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForResponse'
    requestedAmount:
      type: number
      description: The amount sent in the transaction request. The amount is always a non-null positive integer in the smallest denomination of the currency (e.g. cents for USD or CAD).
      example: 1000
    sessionId:
      type: string
      description: Session ID for the iframe transaction.
      example: 'ses_01JSFAMY0AGW27QKP30C727512'
    iframeUrl:
      type: string
      description: URL for the iframe to collect payment information, or null if iframe could not be created due to invalid credentials, etc.
      example: 'https://iframe.integratedcommerce.io/session/01JSFAMY0AGW27QKP30C727512'
    expirationTimestamp:
      type: string
      format: date-time
      description: When the iframe session will expire.
      example: '2025-04-17T14:19:03Z'
    status:
      type: string
      enum: [pending, completed, expired, error]
      description: Status of the iframe session. When created, this will always be pending. The status values will be updated as the customer goes through the iframe process.
      example: 'pending'

TransactionResponseObject:
  type: object
  description: Represents the response to a sale or authorization transaction.
  properties:
    id:
      type: string
      description: Unique ID for this transaction.
      example: 'trx_01J2F0EKHC7HY2R93C8ENBD1FG'
    paymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethodDetails'
        - type: object
          description: |
            The payment method used for this transaction. This could be:

            - The payment method used for this Card Present transaction.
            - The payment method used for this Card Not Present transaction.
            - The payment method used for this tokenized card transaction.

            If a new card was tokenized during the transaction, the tokenized card ID and details will be returned in the `transactionResponses`'s `paymentMethod` object.
          properties:
            id:
              example: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForResponse'
    resultCode:
      $ref: '#/components/schemas/ResultCode'
    resultText:
      $ref: '#/components/schemas/ResultText'
    requestedAmount:
      type: number
      description: The amount sent in the transaction request. The amount is always a non-null positive integer in the smallest denomination of the currency (e.g. cents for USD or CAD).
      example: 1000
    approvedAmount:
      type: number
      description: The amount approved. The approved amount is always a non-null positive integer in the smallest denomination of the currency (e.g. cents for USD or CAD). If approvedAmount is different from amount, it implies that an amount was adjusted by the merchant or customer (for example, a tip or surcharge added directly on a payment terminal).
      example: 1000
    balanceAmount:
      type: number
      description: The balance that remains to be paid on the transaction. This amount is always an integer in the smallest denomination of the currency (e.g. cents for USD or CAD).
      example: 0
    transactionResponses:
      type: array
      description: A list of all transaction responses received during the transaction. In most cases, there will be only one response. However, when performing Card Present transactions, some Payment Terminals can return more than one transaction response.
      items:
        allOf:
          - $ref: '#/components/schemas/TransactionResponse'
          - type: object
            properties:
              paymentMethod:
                allOf:
                  - $ref: '#/components/schemas/PaymentMethodDetails'
                  - type: object
                    description: |
                      If a new card was tokenized during the transaction, the tokenized card ID and details will be returned (`pmt_tkn_*`). This value should be stored in your system if you wish to use it for subsequent Card On File transactions.
                    properties:
                      id:
                        example: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'

CNPTransactionResponse:
  type: object
  description: Represents the response to a Card Not Present sale or authorization using a previously tokenized card.
  properties:
    id:
      type: string
      description: Unique ID for this transaction.
      example: 'trx_01J2F0EKHC7HY2R93C8ENBD1FG'
    paymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethodDetails'
        - type: object
          description: The payment method used for this transaction.
          properties:
            id:
              example: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForResponse'
    resultCode:
      $ref: '#/components/schemas/ResultCode'
    resultText:
      $ref: '#/components/schemas/ResultText'
    requestedAmount:
      type: number
      description: The amount sent in the transaction request. The amount is always a non-null positive integer in the smallest denomination of the currency (e.g. cents for USD or CAD).
      example: 1000
    approvedAmount:
      type: number
      description: The amount approved. The approved amount is always a non-null positive integer in the smallest denomination of the currency (e.g. cents for USD or CAD).
      example: 1000
    balanceAmount:
      type: number
      description: The balance that remains to be paid on the transaction. This amount is always an integer in the smallest denomination of the currency (e.g. cents for USD or CAD).
      example: 0
    transactionResponses:
      type: array
      description: A list of all transaction responses received during the transaction. In most cases, there will be only one response.
      items:
        $ref: '#/components/schemas/TransactionResponse'

CaptureResponse:
  type: object
  description: Represents the response to a capture request.
  properties:
    id:
      type: string
      description: Unique ID for this capture transaction.
      example: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
    paymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethodDetails'
        - type: object
          description: The payment method used for this transaction.
          properties:
            id:
              example: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForCapture'
    resultCode:
      $ref: '#/components/schemas/ResultCode'
    resultText:
      $ref: '#/components/schemas/ResultText'
    requestedAmount:
      type: number
      description: The amount requested for capture. If not specified in the request, this will be the full authorized amount.
      example: 1000
    approvedAmount:
      type: number
      description: The amount that was successfully captured.
      example: 1000
    receipt:
      allOf:
        - $ref: '#/components/schemas/Receipt'
        - type: object
          description: |
            The receipt for the capture transaction, if available. If the original transaction was a Card Present transaction, the receipt will be included. For Card Not Present transactions, the receipt will be empty.
          properties:
            lines:
              description: The receipt lines.

RefundResponse:
  type: object
  description: Represents the response to a refund request.
  properties:
    id:
      type: string
      description: Unique ID for this refund transaction.
      example: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
    paymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethodDetails'
        - type: object
          description: The payment method used for this transaction.
          properties:
            id:
              example: 'pmt_trm_01JRZPTMTBN41PC3VPQNZ5T3HF'
    invoiceNumber:
      $ref: '#/components/schemas/InvoiceNumber'
    orderNumber:
      $ref: '#/components/schemas/OrderNumber'
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForRefund'
    resultCode:
      $ref: '#/components/schemas/ResultCode'
    resultText:
      $ref: '#/components/schemas/ResultText'
    requestedAmount:
      type: number
      description: The amount requested for refund. If not specified in the request, this will be the full transaction amount.
      example: 1000
    approvedAmount:
      type: number
      description: The amount that was successfully refunded or voided.
      example: 1000
    receipt:
      allOf:
        - $ref: '#/components/schemas/Receipt'
        - type: object
          description: |
            The receipt for the refund transaction, if available. If the original transaction was a Card Present transaction, the receipt will be included. For Card Not Present transactions, the receipt will be empty.
          properties:
            lines:
              description: The receipt lines.

CardOnFileAddResponse:
  type: object
  description: Represents the response to a physical card tokenization request.
  properties:
    id:
      type: string
      description: Unique ID for this card tokenization transaction.
      example: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
    paymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethodDetails'
        - type: object
          description: |
            The tokenized card that was created.

            Example format: `pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J`
          properties:
            id:
              example: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForResponse'
    resultCode:
      $ref: '#/components/schemas/ResultCode'
    resultText:
      $ref: '#/components/schemas/ResultText'
    transactionResponses:
      type: array
      description: A list of all transaction responses received during the $0 authorization verification of the card.
      items:
        $ref: '#/components/schemas/TransactionResponse'

CardOnFileVirtualAddResponse:
  type: object
  description: Represents the response to a hosted payment page or iframe card tokenization request.
  properties:
    id:
      type: string
      description: Unique ID for this card tokenization transaction.
      example: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
    paymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethodDetails'
        - type: object
          description: The payment method used for this transaction.
          properties:
            id:
              example: 'pmt_vrt_01JRZPTWS99Z7RB57Q1CVWSWDS'
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForResponse'
    requestedAmount:
      type: number
      description: Will be null or 0 for token creation.
      example: 0
    sessionId:
      type: string
      description: Session ID for the iframe transaction.
      example: 'ses_01JSFAMY0AGW27QKP30C727512'
    iframeUrl:
      type: string
      description: URL for the iframe to collect payment information, or null if iframe could not be created due to invalid credentials, etc.
      example: 'https://iframe.integratedcommerce.io/session/01JSFAMY0AGW27QKP30C727512'
    expirationTimestamp:
      type: string
      format: date-time
      description: When the iframe session will expire.
      example: '2025-04-17T14:19:03Z'
    status:
      type: string
      enum: [pending, completed, expired, error]
      description: Status of the iframe session. When created, this will always be pending. The status values will be updated as the customer goes through the iframe process.
      example: 'pending'

CardOnFileUpdateResponse:
  type: object
  description: Represents the response to a tokenized card update request.
  properties:
    id:
      type: string
      description: Unique ID for this card update transaction.
      example: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
    paymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethodDetails'
        - type: object
          description: The tokenized card that was updated.
          properties:
            id:
              example: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForResponse'
    resultCode:
      $ref: '#/components/schemas/ResultCode'
    resultText:
      $ref: '#/components/schemas/ResultText'

CardOnFileRemoveResponse:
  type: object
  description: Represents the response to a tokenized card removal request.
  properties:
    id:
      type: string
      description: Unique ID for this card removal transaction.
      example: 'trx_01J2F0ZJ2JW5B63CJFPXRGAB1S'
    paymentMethod:
      allOf:
        - $ref: '#/components/schemas/PaymentMethodDetails'
        - type: object
          description: The tokenized card that was removed.
          properties:
            id:
              example: 'pmt_tkn_01JRZPRGFF4J2SZC3HMDBYEN2J'
    referenceId:
      $ref: '#/components/schemas/ReferenceIdForResponse'
    resultCode:
      $ref: '#/components/schemas/ResultCode'
    resultText:
      $ref: '#/components/schemas/ResultText'

WebhookEvent:
  type: object
  description: Webhook event details.
  properties:
    id:
      type: string
      description: Unique ID for this webhook event.
      example: 'evt_01JS21X856RR8R69GV5F17XK9C'
    type:
      type: string
      description: The type of event that occurred.
      example: 'event.completed'
    timestamp:
      type: string
      format: date-time
      description: The time when the event was triggered.
      example: '2025-04-16T14:30:00Z'
  required:
    - id
    - type
    - timestamp

SaleCompletedWebhook:
  type: object
  description: Represents the webhook triggered when a financial transaction is processed and completed.
  properties:
    event:
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
        - type: object
          properties:
            type:
              example: 'sale.completed'
    originalResponse:
      $ref: '#/components/schemas/TransactionResponseObject'
  required:
    - event
    - originalResponse

AuthCompletedWebhook:
  type: object
  description: Represents the webhook triggered when a transaction authorization is completed.
  properties:
    event:
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
        - type: object
          properties:
            type:
              example: 'auth.completed'
    originalResponse:
      $ref: '#/components/schemas/TransactionResponseObject'
  required:
    - event
    - originalResponse

CaptureCompletedWebhook:
  type: object
  description: Represents the webhook triggered when a transaction capture for a previously authorized transaction is completed.
  properties:
    event:
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
        - type: object
          properties:
            type:
              example: 'capture.completed'
    originalResponse:
      $ref: '#/components/schemas/CaptureResponse'
  required:
    - event
    - originalResponse

RefundCompletedWebhook:
  type: object
  description: Represents the webhook triggered when a transaction void or refund for a previously completed transaction is completed.
  properties:
    event:
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
        - type: object
          properties:
            type:
              example: 'refund.completed'
    originalResponse:
      $ref: '#/components/schemas/RefundResponse'
  required:
    - event
    - originalResponse

TokenCreatedWebhook:
  type: object
  description: Represents the webhook triggered when a card is tokenized and stored as a payment method.
  properties:
    event:
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
        - type: object
          properties:
            type:
              example: 'token.created'
    originalResponse:
      $ref: '#/components/schemas/CardOnFileAddResponse'
  required:
    - event
    - originalResponse

TokenUpdatedWebhook:
  type: object
  description: Represents the webhook triggered when an expiration date for a previously tokenized card is updated.
  properties:
    event:
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
        - type: object
          properties:
            type:
              example: 'token.updated'
    originalResponse:
      $ref: '#/components/schemas/CardOnFileUpdateResponse'
  required:
    - event
    - originalResponse

TokenRemovedWebhook:
  type: object
  description: Represents the webhook triggered when a previously tokenized card is removed from the system.
  properties:
    event:
      allOf:
        - $ref: '#/components/schemas/WebhookEvent'
        - type: object
          properties:
            type:
              example: 'token.removed'
    originalResponse:
      $ref: '#/components/schemas/CardOnFileRemoveResponse'
  required:
    - event
    - originalResponse
